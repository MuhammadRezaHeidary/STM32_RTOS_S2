
RTOS_S2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800747c  0800747c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800747c  0800747c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800747c  0800747c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800747c  0800747c  0001747c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007480  08007480  00017480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000015e0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001640  20001640  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001dffd  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d63  00000000  00000000  0003e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018e0  00000000  00000000  00041e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001378  00000000  00000000  00043718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020ccb  00000000  00000000  00044a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f540  00000000  00000000  0006575b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c61b3  00000000  00000000  00084c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006ed0  00000000  00000000  0014ae50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00151d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007210 	.word	0x08007210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007210 	.word	0x08007210

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	2000011c 	.word	0x2000011c

080002b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b4:	b5b0      	push	{r4, r5, r7, lr}
 80002b6:	b098      	sub	sp, #96	; 0x60
 80002b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ba:	f000 fd5d 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002be:	f000 f85f 	bl	8000380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c2:	f000 f98f 	bl	80005e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002c6:	f000 f8bd 	bl	8000444 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002ca:	f000 f8fb 	bl	80004c4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80002ce:	f000 f967 	bl	80005a0 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 80002d2:	f000 f935 	bl	8000540 <MX_USART1_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 80002d6:	2300      	movs	r3, #0
 80002d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80002da:	2300      	movs	r3, #0
 80002dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 80002de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002e2:	2101      	movs	r1, #1
 80002e4:	4618      	mov	r0, r3
 80002e6:	f003 ff51 	bl	800418c <osSemaphoreCreate>
 80002ea:	4603      	mov	r3, r0
 80002ec:	4a1d      	ldr	r2, [pc, #116]	; (8000364 <main+0xb0>)
 80002ee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of NormalTask */
  osThreadDef(NormalTask, StartNormalTask, osPriorityNormal, 0, 128);
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <main+0xb4>)
 80002f2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80002f6:	461d      	mov	r5, r3
 80002f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NormalTaskHandle = osThreadCreate(osThread(NormalTask), NULL);
 8000304:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f003 fede 	bl	80040cc <osThreadCreate>
 8000310:	4603      	mov	r3, r0
 8000312:	4a16      	ldr	r2, [pc, #88]	; (800036c <main+0xb8>)
 8000314:	6013      	str	r3, [r2, #0]

  /* definition and creation of HighTask */
  osThreadDef(HighTask, StartHighTask, osPriorityAboveNormal, 0, 128);
 8000316:	4b16      	ldr	r3, [pc, #88]	; (8000370 <main+0xbc>)
 8000318:	f107 0420 	add.w	r4, r7, #32
 800031c:	461d      	mov	r5, r3
 800031e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000322:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000326:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HighTaskHandle = osThreadCreate(osThread(HighTask), NULL);
 800032a:	f107 0320 	add.w	r3, r7, #32
 800032e:	2100      	movs	r1, #0
 8000330:	4618      	mov	r0, r3
 8000332:	f003 fecb 	bl	80040cc <osThreadCreate>
 8000336:	4603      	mov	r3, r0
 8000338:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <main+0xc0>)
 800033a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LowTask */
  osThreadDef(LowTask, StartLowTask, osPriorityBelowNormal, 0, 128);
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <main+0xc4>)
 800033e:	1d3c      	adds	r4, r7, #4
 8000340:	461d      	mov	r5, r3
 8000342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000346:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800034a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LowTaskHandle = osThreadCreate(osThread(LowTask), NULL);
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f003 feba 	bl	80040cc <osThreadCreate>
 8000358:	4603      	mov	r3, r0
 800035a:	4a08      	ldr	r2, [pc, #32]	; (800037c <main+0xc8>)
 800035c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800035e:	f003 feae 	bl	80040be <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000362:	e7fe      	b.n	8000362 <main+0xae>
 8000364:	20000754 	.word	0x20000754
 8000368:	08007234 	.word	0x08007234
 800036c:	20000748 	.word	0x20000748
 8000370:	0800725c 	.word	0x0800725c
 8000374:	2000074c 	.word	0x2000074c
 8000378:	08007280 	.word	0x08007280
 800037c:	20000750 	.word	0x20000750

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b09e      	sub	sp, #120	; 0x78
 8000384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800038a:	2228      	movs	r2, #40	; 0x28
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f006 fa64 	bl	800685c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000394:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a4:	463b      	mov	r3, r7
 80003a6:	223c      	movs	r2, #60	; 0x3c
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f006 fa56 	bl	800685c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003b0:	2303      	movs	r3, #3
 80003b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003be:	2301      	movs	r3, #1
 80003c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c2:	2310      	movs	r3, #16
 80003c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c6:	2302      	movs	r3, #2
 80003c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003d4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 f986 	bl	80016ec <HAL_RCC_OscConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003e6:	f000 fa89 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ea:	230f      	movs	r3, #15
 80003ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ee:	2302      	movs	r3, #2
 80003f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000400:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000404:	2102      	movs	r1, #2
 8000406:	4618      	mov	r0, r3
 8000408:	f002 f9ae 	bl	8002768 <HAL_RCC_ClockConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000412:	f000 fa73 	bl	80008fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <SystemClock_Config+0xc0>)
 8000418:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800041a:	2300      	movs	r3, #0
 800041c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800041e:	2300      	movs	r3, #0
 8000420:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000422:	2300      	movs	r3, #0
 8000424:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000426:	463b      	mov	r3, r7
 8000428:	4618      	mov	r0, r3
 800042a:	f002 fc05 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000434:	f000 fa62 	bl	80008fc <Error_Handler>
  }
}
 8000438:	bf00      	nop
 800043a:	3778      	adds	r7, #120	; 0x78
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	00020021 	.word	0x00020021

08000444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MX_I2C1_Init+0x74>)
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <MX_I2C1_Init+0x78>)
 800044c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800044e:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000450:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <MX_I2C1_Init+0x7c>)
 8000452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000454:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_I2C1_Init+0x74>)
 800045c:	2201      	movs	r2, #1
 800045e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_I2C1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800047e:	480e      	ldr	r0, [pc, #56]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000480:	f000 ff3c 	bl	80012fc <HAL_I2C_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800048a:	f000 fa37 	bl	80008fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800048e:	2100      	movs	r1, #0
 8000490:	4809      	ldr	r0, [pc, #36]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000492:	f000 ffc2 	bl	800141a <HAL_I2CEx_ConfigAnalogFilter>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800049c:	f000 fa2e 	bl	80008fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004a0:	2100      	movs	r1, #0
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_I2C1_Init+0x74>)
 80004a4:	f001 f804 	bl	80014b0 <HAL_I2CEx_ConfigDigitalFilter>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ae:	f000 fa25 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	2000031c 	.word	0x2000031c
 80004bc:	40005400 	.word	0x40005400
 80004c0:	2000090e 	.word	0x2000090e

080004c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_SPI1_Init+0x74>)
 80004ca:	4a1c      	ldr	r2, [pc, #112]	; (800053c <MX_SPI1_Init+0x78>)
 80004cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_SPI1_Init+0x74>)
 80004d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_SPI1_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_SPI1_Init+0x74>)
 80004de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <MX_SPI1_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <MX_SPI1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_SPI1_Init+0x74>)
 80004f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_SPI1_Init+0x74>)
 80004fa:	2208      	movs	r2, #8
 80004fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_SPI1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_SPI1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_SPI1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_SPI1_Init+0x74>)
 8000512:	2207      	movs	r2, #7
 8000514:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_SPI1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_SPI1_Init+0x74>)
 800051e:	2208      	movs	r2, #8
 8000520:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_SPI1_Init+0x74>)
 8000524:	f002 fd38 	bl	8002f98 <HAL_SPI_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f000 f9e5 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000370 	.word	0x20000370
 800053c:	40013000 	.word	0x40013000

08000540 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000546:	4a15      	ldr	r2, [pc, #84]	; (800059c <MX_USART1_UART_Init+0x5c>)
 8000548:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <MX_USART1_UART_Init+0x58>)
 800054c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000550:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_USART1_UART_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000566:	220c      	movs	r2, #12
 8000568:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_USART1_UART_Init+0x58>)
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000578:	2200      	movs	r2, #0
 800057a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_USART1_UART_Init+0x58>)
 800057e:	2200      	movs	r2, #0
 8000580:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000584:	f003 f874 	bl	8003670 <HAL_UART_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800058e:	f000 f9b5 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200003d4 	.word	0x200003d4
 800059c:	40013800 	.word	0x40013800

080005a0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <MX_USB_PCD_Init+0x3c>)
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <MX_USB_PCD_Init+0x40>)
 80005a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_USB_PCD_Init+0x3c>)
 80005ac:	2208      	movs	r2, #8
 80005ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <MX_USB_PCD_Init+0x3c>)
 80005b2:	2202      	movs	r2, #2
 80005b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_USB_PCD_Init+0x3c>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <MX_USB_PCD_Init+0x3c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_USB_PCD_Init+0x3c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <MX_USB_PCD_Init+0x3c>)
 80005ca:	f000 ffbd 	bl	8001548 <HAL_PCD_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80005d4:	f000 f992 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000045c 	.word	0x2000045c
 80005e0:	40005c00 	.word	0x40005c00

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fa:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <MX_GPIO_Init+0xf4>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a36      	ldr	r2, [pc, #216]	; (80006d8 <MX_GPIO_Init+0xf4>)
 8000600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <MX_GPIO_Init+0xf4>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <MX_GPIO_Init+0xf4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <MX_GPIO_Init+0xf4>)
 8000618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800061c:	6153      	str	r3, [r2, #20]
 800061e:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <MX_GPIO_Init+0xf4>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <MX_GPIO_Init+0xf4>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a2a      	ldr	r2, [pc, #168]	; (80006d8 <MX_GPIO_Init+0xf4>)
 8000630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <MX_GPIO_Init+0xf4>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MX_GPIO_Init+0xf4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a24      	ldr	r2, [pc, #144]	; (80006d8 <MX_GPIO_Init+0xf4>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <MX_GPIO_Init+0xf4>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_GPIO_Init+0xf4>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a1e      	ldr	r2, [pc, #120]	; (80006d8 <MX_GPIO_Init+0xf4>)
 8000660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_GPIO_Init+0xf4>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000672:	2200      	movs	r2, #0
 8000674:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000678:	4818      	ldr	r0, [pc, #96]	; (80006dc <MX_GPIO_Init+0xf8>)
 800067a:	f000 fe27 	bl	80012cc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800067e:	2337      	movs	r3, #55	; 0x37
 8000680:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000682:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4812      	ldr	r0, [pc, #72]	; (80006dc <MX_GPIO_Init+0xf8>)
 8000694:	f000 fc88 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000698:	f64f 7308 	movw	r3, #65288	; 0xff08
 800069c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	480a      	ldr	r0, [pc, #40]	; (80006dc <MX_GPIO_Init+0xf8>)
 80006b2:	f000 fc79 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b6:	2301      	movs	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006cc:	f000 fc6c 	bl	8000fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	; 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	48001000 	.word	0x48001000

080006e0 <task_High_send>:

/* USER CODE BEGIN 4 */
void task_High_send() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08e      	sub	sp, #56	; 0x38
 80006e4:	af00      	add	r7, sp, #0
	uint8_t data[50];
    sprintf(data, "Task High => *Enter* & waiting for Binary Semaphore\r\n");
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4920      	ldr	r1, [pc, #128]	; (800076c <task_High_send+0x8c>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 f896 	bl	800681c <siprintf>
    HAL_UART_Transmit(&huart1, data, strlen(data), 500);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fd6c 	bl	80001d0 <strlen>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	1d39      	adds	r1, r7, #4
 80006fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000702:	481b      	ldr	r0, [pc, #108]	; (8000770 <task_High_send+0x90>)
 8000704:	f003 f802 	bl	800370c <HAL_UART_Transmit>

    osSemaphoreWait(BinSemHandle, osWaitForever);
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <task_High_send+0x94>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f04f 31ff 	mov.w	r1, #4294967295
 8000710:	4618      	mov	r0, r3
 8000712:	f003 fd6d 	bl	80041f0 <osSemaphoreWait>

    sprintf(data, "Task High => acquired by Binary Semaphore\r\n");
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4917      	ldr	r1, [pc, #92]	; (8000778 <task_High_send+0x98>)
 800071a:	4618      	mov	r0, r3
 800071c:	f006 f87e 	bl	800681c <siprintf>
    HAL_UART_Transmit(&huart1, data, strlen(data), 500);
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fd54 	bl	80001d0 <strlen>
 8000728:	4603      	mov	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	1d39      	adds	r1, r7, #4
 800072e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000732:	480f      	ldr	r0, [pc, #60]	; (8000770 <task_High_send+0x90>)
 8000734:	f002 ffea 	bl	800370c <HAL_UART_Transmit>

    sprintf(data, "Task High => #Leave#  & relase the Binary Semaphore\r\n");
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4910      	ldr	r1, [pc, #64]	; (800077c <task_High_send+0x9c>)
 800073c:	4618      	mov	r0, r3
 800073e:	f006 f86d 	bl	800681c <siprintf>
    HAL_UART_Transmit(&huart1, data, strlen(data), 500);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd43 	bl	80001d0 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	1d39      	adds	r1, r7, #4
 8000750:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000754:	4806      	ldr	r0, [pc, #24]	; (8000770 <task_High_send+0x90>)
 8000756:	f002 ffd9 	bl	800370c <HAL_UART_Transmit>

    osSemaphoreRelease(BinSemHandle);
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <task_High_send+0x94>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f003 fd94 	bl	800428c <osSemaphoreRelease>
}
 8000764:	bf00      	nop
 8000766:	3738      	adds	r7, #56	; 0x38
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	0800729c 	.word	0x0800729c
 8000770:	200003d4 	.word	0x200003d4
 8000774:	20000754 	.word	0x20000754
 8000778:	080072d4 	.word	0x080072d4
 800077c:	08007300 	.word	0x08007300

08000780 <task_Normal_send>:
    HAL_UART_Transmit(&huart1, data, strlen(data), 500);

   osSemaphoreRelease(BinSemHandle);
}*/

void task_Normal_send() {
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	; 0x38
 8000784:	af00      	add	r7, sp, #0
	uint8_t data[50];
    sprintf(data, "Task Medium => *Enter*\r\n");
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4912      	ldr	r1, [pc, #72]	; (80007d4 <task_Normal_send+0x54>)
 800078a:	4618      	mov	r0, r3
 800078c:	f006 f846 	bl	800681c <siprintf>
    HAL_UART_Transmit(&huart1, data, strlen(data), 500);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fd1c 	bl	80001d0 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29a      	uxth	r2, r3
 800079c:	1d39      	adds	r1, r7, #4
 800079e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007a2:	480d      	ldr	r0, [pc, #52]	; (80007d8 <task_Normal_send+0x58>)
 80007a4:	f002 ffb2 	bl	800370c <HAL_UART_Transmit>

    sprintf(data, "Task Medium => #Leave#\r\n");
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	490c      	ldr	r1, [pc, #48]	; (80007dc <task_Normal_send+0x5c>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f006 f835 	bl	800681c <siprintf>
    HAL_UART_Transmit(&huart1, data, strlen(data), 500);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fd0b 	bl	80001d0 <strlen>
 80007ba:	4603      	mov	r3, r0
 80007bc:	b29a      	uxth	r2, r3
 80007be:	1d39      	adds	r1, r7, #4
 80007c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <task_Normal_send+0x58>)
 80007c6:	f002 ffa1 	bl	800370c <HAL_UART_Transmit>
}
 80007ca:	bf00      	nop
 80007cc:	3738      	adds	r7, #56	; 0x38
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	08007338 	.word	0x08007338
 80007d8:	200003d4 	.word	0x200003d4
 80007dc:	08007354 	.word	0x08007354

080007e0 <task_Low_send>:
    sprintf(data, "Task Low => #Leave# \r\n");
    HAL_UART_Transmit(&huart1, data, strlen(data), 500);
}
*/

void task_Low_send() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08e      	sub	sp, #56	; 0x38
 80007e4:	af00      	add	r7, sp, #0
	uint8_t data[50];
    sprintf(data, "Task Low => *Enter* & waiting for Binary Semaphore\r\n");
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4925      	ldr	r1, [pc, #148]	; (8000880 <task_Low_send+0xa0>)
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 f816 	bl	800681c <siprintf>
    HAL_UART_Transmit(&huart1, data, strlen(data), 500);
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	1d39      	adds	r1, r7, #4
 80007fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000802:	4820      	ldr	r0, [pc, #128]	; (8000884 <task_Low_send+0xa4>)
 8000804:	f002 ff82 	bl	800370c <HAL_UART_Transmit>

    osSemaphoreWait(BinSemHandle, osWaitForever);
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <task_Low_send+0xa8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f04f 31ff 	mov.w	r1, #4294967295
 8000810:	4618      	mov	r0, r3
 8000812:	f003 fced 	bl	80041f0 <osSemaphoreWait>

    sprintf(data, "Task Low => acquired by Binary Semaphore\r\n");
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	491c      	ldr	r1, [pc, #112]	; (800088c <task_Low_send+0xac>)
 800081a:	4618      	mov	r0, r3
 800081c:	f005 fffe 	bl	800681c <siprintf>
    HAL_UART_Transmit(&huart1, data, strlen(data), 500);
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fcd4 	bl	80001d0 <strlen>
 8000828:	4603      	mov	r3, r0
 800082a:	b29a      	uxth	r2, r3
 800082c:	1d39      	adds	r1, r7, #4
 800082e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <task_Low_send+0xa4>)
 8000834:	f002 ff6a 	bl	800370c <HAL_UART_Transmit>

    while(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8000838:	bf00      	nop
 800083a:	2101      	movs	r1, #1
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f000 fd2c 	bl	800129c <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f7      	beq.n	800083a <task_Low_send+0x5a>

    sprintf(data, "Task Low => #Leave# & relase the Binary Semaphore\r\n");
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4910      	ldr	r1, [pc, #64]	; (8000890 <task_Low_send+0xb0>)
 800084e:	4618      	mov	r0, r3
 8000850:	f005 ffe4 	bl	800681c <siprintf>
    HAL_UART_Transmit(&huart1, data, strlen(data), 500);
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fcba 	bl	80001d0 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	1d39      	adds	r1, r7, #4
 8000862:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <task_Low_send+0xa4>)
 8000868:	f002 ff50 	bl	800370c <HAL_UART_Transmit>

    osSemaphoreRelease(BinSemHandle);
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <task_Low_send+0xa8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f003 fd0b 	bl	800428c <osSemaphoreRelease>
}
 8000876:	bf00      	nop
 8000878:	3738      	adds	r7, #56	; 0x38
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	08007370 	.word	0x08007370
 8000884:	200003d4 	.word	0x200003d4
 8000888:	20000754 	.word	0x20000754
 800088c:	080073a8 	.word	0x080073a8
 8000890:	080073d4 	.word	0x080073d4

08000894 <StartNormalTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void const * argument)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  task_Normal_send();
 800089c:	f7ff ff70 	bl	8000780 <task_Normal_send>
	  osDelay(500);
 80008a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a4:	f003 fc5e 	bl	8004164 <osDelay>
	  task_Normal_send();
 80008a8:	e7f8      	b.n	800089c <StartNormalTask+0x8>

080008aa <StartHighTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHighTask */
void StartHighTask(void const * argument)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHighTask */
  /* Infinite loop */
  for(;;)
  {
	  task_High_send();
 80008b2:	f7ff ff15 	bl	80006e0 <task_High_send>
	  osDelay(500);
 80008b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ba:	f003 fc53 	bl	8004164 <osDelay>
	  task_High_send();
 80008be:	e7f8      	b.n	80008b2 <StartHighTask+0x8>

080008c0 <StartLowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowTask */
void StartLowTask(void const * argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLowTask */
  /* Infinite loop */
  for(;;)
  {
	  task_Low_send();
 80008c8:	f7ff ff8a 	bl	80007e0 <task_Low_send>
	  osDelay(500);
 80008cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d0:	f003 fc48 	bl	8004164 <osDelay>
	  task_Low_send();
 80008d4:	e7f8      	b.n	80008c8 <StartLowTask+0x8>
	...

080008d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ea:	f000 fa5b 	bl	8000da4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40012c00 	.word	0x40012c00

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_MspInit+0x4c>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <HAL_MspInit+0x4c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6193      	str	r3, [r2, #24]
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_MspInit+0x4c>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_MspInit+0x4c>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	61d3      	str	r3, [r2, #28]
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_MspInit+0x4c>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	210f      	movs	r1, #15
 8000942:	f06f 0001 	mvn.w	r0, #1
 8000946:	f000 fb05 	bl	8000f54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_I2C_MspInit+0x7c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d127      	bne.n	80009ca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_I2C_MspInit+0x80>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <HAL_I2C_MspInit+0x80>)
 8000980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000984:	6153      	str	r3, [r2, #20]
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <HAL_I2C_MspInit+0x80>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000992:	23c0      	movs	r3, #192	; 0xc0
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000996:	2312      	movs	r3, #18
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a2:	2304      	movs	r3, #4
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <HAL_I2C_MspInit+0x84>)
 80009ae:	f000 fafb 	bl	8000fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_I2C_MspInit+0x80>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_I2C_MspInit+0x80>)
 80009b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_I2C_MspInit+0x80>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40005400 	.word	0x40005400
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400

080009e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <HAL_SPI_MspInit+0x7c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d128      	bne.n	8000a54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <HAL_SPI_MspInit+0x80>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <HAL_SPI_MspInit+0x80>)
 8000a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a0c:	6193      	str	r3, [r2, #24]
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <HAL_SPI_MspInit+0x80>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_SPI_MspInit+0x80>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <HAL_SPI_MspInit+0x80>)
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	6153      	str	r3, [r2, #20]
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_SPI_MspInit+0x80>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000a32:	23e0      	movs	r3, #224	; 0xe0
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a42:	2305      	movs	r3, #5
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f000 faaa 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40013000 	.word	0x40013000
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0x7c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d127      	bne.n	8000ad6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_UART_MspInit+0x80>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <HAL_UART_MspInit+0x80>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_UART_MspInit+0x80>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_UART_MspInit+0x80>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <HAL_UART_MspInit+0x80>)
 8000aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000aa8:	6153      	str	r3, [r2, #20]
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_UART_MspInit+0x80>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ab6:	2330      	movs	r3, #48	; 0x30
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ac6:	2307      	movs	r3, #7
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_UART_MspInit+0x84>)
 8000ad2:	f000 fa69 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40013800 	.word	0x40013800
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000800 	.word	0x48000800

08000aec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <HAL_PCD_MspInit+0x80>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d129      	bne.n	8000b62 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_PCD_MspInit+0x84>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_PCD_MspInit+0x84>)
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	6153      	str	r3, [r2, #20]
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_PCD_MspInit+0x84>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000b26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000b38:	230e      	movs	r3, #14
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b46:	f000 fa2f 	bl	8000fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_PCD_MspInit+0x84>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_PCD_MspInit+0x84>)
 8000b50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_PCD_MspInit+0x84>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40005c00 	.word	0x40005c00
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	; 0x30
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b84:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <HAL_InitTick+0xcc>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a2d      	ldr	r2, [pc, #180]	; (8000c40 <HAL_InitTick+0xcc>)
 8000b8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <HAL_InitTick+0xcc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b9c:	f107 020c 	add.w	r2, r7, #12
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 f814 	bl	8002bd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bac:	f001 fff0 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8000bb0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb4:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <HAL_InitTick+0xd0>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	0c9b      	lsrs	r3, r3, #18
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <HAL_InitTick+0xd4>)
 8000bc2:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <HAL_InitTick+0xd8>)
 8000bc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_InitTick+0xd4>)
 8000bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bcc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bce:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <HAL_InitTick+0xd4>)
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_InitTick+0xd4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <HAL_InitTick+0xd4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_InitTick+0xd4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000be6:	4818      	ldr	r0, [pc, #96]	; (8000c48 <HAL_InitTick+0xd4>)
 8000be8:	f002 fa81 	bl	80030ee <HAL_TIM_Base_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d11b      	bne.n	8000c32 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bfa:	4813      	ldr	r0, [pc, #76]	; (8000c48 <HAL_InitTick+0xd4>)
 8000bfc:	f002 fad8 	bl	80031b0 <HAL_TIM_Base_Start_IT>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d111      	bne.n	8000c32 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c0e:	2019      	movs	r0, #25
 8000c10:	f000 f9bc 	bl	8000f8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b0f      	cmp	r3, #15
 8000c18:	d808      	bhi.n	8000c2c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	2019      	movs	r0, #25
 8000c20:	f000 f998 	bl	8000f54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_InitTick+0xdc>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e002      	b.n	8000c32 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3730      	adds	r7, #48	; 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000
 8000c44:	431bde83 	.word	0x431bde83
 8000c48:	20000758 	.word	0x20000758
 8000c4c:	40012c00 	.word	0x40012c00
 8000c50:	20000004 	.word	0x20000004

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c86:	f002 fafd 	bl	8003284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000758 	.word	0x20000758

08000c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <_sbrk+0x5c>)
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <_sbrk+0x60>)
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <_sbrk+0x64>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <_sbrk+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d207      	bcs.n	8000cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc4:	f005 fe28 	bl	8006918 <__errno>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	220c      	movs	r2, #12
 8000ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e009      	b.n	8000ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <_sbrk+0x64>)
 8000ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000a000 	.word	0x2000a000
 8000cf4:	00000400 	.word	0x00000400
 8000cf8:	200007a4 	.word	0x200007a4
 8000cfc:	20001640 	.word	0x20001640

08000d00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d28:	f7ff ffea 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d2e:	490d      	ldr	r1, [pc, #52]	; (8000d64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <LoopForever+0xe>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d44:	4c0a      	ldr	r4, [pc, #40]	; (8000d70 <LoopForever+0x16>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d52:	f005 fde7 	bl	8006924 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d56:	f7ff faad 	bl	80002b4 <main>

08000d5a <LoopForever>:

LoopForever:
    b LoopForever
 8000d5a:	e7fe      	b.n	8000d5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d5c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d68:	08007484 	.word	0x08007484
  ldr r2, =_sbss
 8000d6c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d70:	20001640 	.word	0x20001640

08000d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_2_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_Init+0x28>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_Init+0x28>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f8d8 	bl	8000f3e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f7ff fef0 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fdb8 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x20>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x24>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <HAL_IncTick+0x24>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	200007a8 	.word	0x200007a8

08000dcc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;  
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <HAL_GetTick+0x14>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	200007a8 	.word	0x200007a8

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db0b      	blt.n	8000e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f003 021f 	and.w	r2, r3, #31
 8000e60:	4907      	ldr	r1, [pc, #28]	; (8000e80 <__NVIC_EnableIRQ+0x38>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	095b      	lsrs	r3, r3, #5
 8000e68:	2001      	movs	r0, #1
 8000e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ff4c 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f66:	f7ff ff61 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000f6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68b9      	ldr	r1, [r7, #8]
 8000f70:	6978      	ldr	r0, [r7, #20]
 8000f72:	f7ff ffb1 	bl	8000ed8 <NVIC_EncodePriority>
 8000f76:	4602      	mov	r2, r0
 8000f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff80 	bl	8000e84 <__NVIC_SetPriority>
}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff54 	bl	8000e48 <__NVIC_EnableIRQ>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb6:	e154      	b.n	8001262 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 8146 	beq.w	800125c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d005      	beq.n	8000fe8 <HAL_GPIO_Init+0x40>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d130      	bne.n	800104a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101e:	2201      	movs	r2, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	f003 0201 	and.w	r2, r3, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b03      	cmp	r3, #3
 8001054:	d017      	beq.n	8001086 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d123      	bne.n	80010da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	6939      	ldr	r1, [r7, #16]
 80010d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0203 	and.w	r2, r3, #3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 80a0 	beq.w	800125c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	4b58      	ldr	r3, [pc, #352]	; (8001280 <HAL_GPIO_Init+0x2d8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a57      	ldr	r2, [pc, #348]	; (8001280 <HAL_GPIO_Init+0x2d8>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b55      	ldr	r3, [pc, #340]	; (8001280 <HAL_GPIO_Init+0x2d8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001134:	4a53      	ldr	r2, [pc, #332]	; (8001284 <HAL_GPIO_Init+0x2dc>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800115e:	d019      	beq.n	8001194 <HAL_GPIO_Init+0x1ec>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a49      	ldr	r2, [pc, #292]	; (8001288 <HAL_GPIO_Init+0x2e0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d013      	beq.n	8001190 <HAL_GPIO_Init+0x1e8>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a48      	ldr	r2, [pc, #288]	; (800128c <HAL_GPIO_Init+0x2e4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d00d      	beq.n	800118c <HAL_GPIO_Init+0x1e4>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a47      	ldr	r2, [pc, #284]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d007      	beq.n	8001188 <HAL_GPIO_Init+0x1e0>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a46      	ldr	r2, [pc, #280]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d101      	bne.n	8001184 <HAL_GPIO_Init+0x1dc>
 8001180:	2304      	movs	r3, #4
 8001182:	e008      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 8001184:	2305      	movs	r3, #5
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 8001188:	2303      	movs	r3, #3
 800118a:	e004      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 800118c:	2302      	movs	r3, #2
 800118e:	e002      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <HAL_GPIO_Init+0x1ee>
 8001194:	2300      	movs	r3, #0
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	f002 0203 	and.w	r2, r2, #3
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	4093      	lsls	r3, r2
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a6:	4937      	ldr	r1, [pc, #220]	; (8001284 <HAL_GPIO_Init+0x2dc>)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b4:	4b38      	ldr	r3, [pc, #224]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011d8:	4a2f      	ldr	r2, [pc, #188]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001202:	4a25      	ldr	r2, [pc, #148]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800122c:	4a1a      	ldr	r2, [pc, #104]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_GPIO_Init+0x2f0>)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	fa22 f303 	lsr.w	r3, r2, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	f47f aea3 	bne.w	8000fb8 <HAL_GPIO_Init+0x10>
  }
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000
 8001288:	48000400 	.word	0x48000400
 800128c:	48000800 	.word	0x48000800
 8001290:	48000c00 	.word	0x48000c00
 8001294:	48001000 	.word	0x48001000
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e001      	b.n	80012be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e081      	b.n	8001412 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d106      	bne.n	8001328 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fb18 	bl	8000958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2224      	movs	r2, #36	; 0x24
 800132c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800134c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800135c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d107      	bne.n	8001376 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	e006      	b.n	8001384 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001382:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d104      	bne.n	8001396 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001394:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691a      	ldr	r2, [r3, #16]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69d9      	ldr	r1, [r3, #28]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1a      	ldr	r2, [r3, #32]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0201 	orr.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2220      	movs	r2, #32
 80013fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b20      	cmp	r3, #32
 800142e:	d138      	bne.n	80014a2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800143a:	2302      	movs	r3, #2
 800143c:	e032      	b.n	80014a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2224      	movs	r2, #36	; 0x24
 800144a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0201 	bic.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800146c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6819      	ldr	r1, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2220      	movs	r2, #32
 8001492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014a2:	2302      	movs	r3, #2
  }
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b20      	cmp	r3, #32
 80014c4:	d139      	bne.n	800153a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e033      	b.n	800153c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2224      	movs	r2, #36	; 0x24
 80014e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001502:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f042 0201 	orr.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2220      	movs	r2, #32
 800152a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800153a:	2302      	movs	r3, #2
  }
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	b08b      	sub	sp, #44	; 0x2c
 800154c:	af06      	add	r7, sp, #24
 800154e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0c4      	b.n	80016e4 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d106      	bne.n	8001574 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fabc 	bl	8000aec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2203      	movs	r2, #3
 8001578:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f002 fd36 	bl	8003ff2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	e040      	b.n	800160e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	3301      	adds	r3, #1
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	440b      	add	r3, r1
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	3303      	adds	r3, #3
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	3338      	adds	r3, #56	; 0x38
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	333c      	adds	r3, #60	; 0x3c
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3340      	adds	r3, #64	; 0x40
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	3301      	adds	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3b9      	bcc.n	800158c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e044      	b.n	80016a8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	3301      	adds	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d3b5      	bcc.n	800161e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	687e      	ldr	r6, [r7, #4]
 80016ba:	466d      	mov	r5, sp
 80016bc:	f106 0410 	add.w	r4, r6, #16
 80016c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	602b      	str	r3, [r5, #0]
 80016c8:	1d33      	adds	r3, r6, #4
 80016ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f002 fcab 	bl	8004028 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016fc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	f001 b823 	b.w	8002758 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001716:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 817d 	beq.w	8001a22 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001728:	4bbc      	ldr	r3, [pc, #752]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b04      	cmp	r3, #4
 8001732:	d00c      	beq.n	800174e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001734:	4bb9      	ldr	r3, [pc, #740]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d15c      	bne.n	80017fa <HAL_RCC_OscConfig+0x10e>
 8001740:	4bb6      	ldr	r3, [pc, #728]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174c:	d155      	bne.n	80017fa <HAL_RCC_OscConfig+0x10e>
 800174e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001752:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001762:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	095b      	lsrs	r3, r3, #5
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d102      	bne.n	8001780 <HAL_RCC_OscConfig+0x94>
 800177a:	4ba8      	ldr	r3, [pc, #672]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	e015      	b.n	80017ac <HAL_RCC_OscConfig+0xc0>
 8001780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001784:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001798:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800179c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80017a8:	4b9c      	ldr	r3, [pc, #624]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017b0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80017b4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017b8:	fa92 f2a2 	rbit	r2, r2
 80017bc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80017c0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80017c4:	fab2 f282 	clz	r2, r2
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	f042 0220 	orr.w	r2, r2, #32
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	f002 021f 	and.w	r2, r2, #31
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f202 	lsl.w	r2, r1, r2
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 811f 	beq.w	8001a20 <HAL_RCC_OscConfig+0x334>
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 8116 	bne.w	8001a20 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f000 bfaf 	b.w	8002758 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x12e>
 800180c:	4b83      	ldr	r3, [pc, #524]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a82      	ldr	r2, [pc, #520]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e036      	b.n	8001888 <HAL_RCC_OscConfig+0x19c>
 800181a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x158>
 800182a:	4b7c      	ldr	r3, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7b      	ldr	r2, [pc, #492]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b79      	ldr	r3, [pc, #484]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a78      	ldr	r2, [pc, #480]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 800183c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e021      	b.n	8001888 <HAL_RCC_OscConfig+0x19c>
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x184>
 8001856:	4b71      	ldr	r3, [pc, #452]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a70      	ldr	r2, [pc, #448]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b6e      	ldr	r3, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a6d      	ldr	r2, [pc, #436]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0x19c>
 8001870:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a69      	ldr	r2, [pc, #420]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a66      	ldr	r2, [pc, #408]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001886:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001888:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f023 020f 	bic.w	r2, r3, #15
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	495f      	ldr	r1, [pc, #380]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d059      	beq.n	8001966 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fa8b 	bl	8000dcc <HAL_GetTick>
 80018b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fa86 	bl	8000dcc <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	; 0x64
 80018ca:	d902      	bls.n	80018d2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	f000 bf43 	b.w	8002758 <HAL_RCC_OscConfig+0x106c>
 80018d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80018e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	095b      	lsrs	r3, r3, #5
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d102      	bne.n	8001904 <HAL_RCC_OscConfig+0x218>
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	e015      	b.n	8001930 <HAL_RCC_OscConfig+0x244>
 8001904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001908:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800191c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001920:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800192c:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001934:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001938:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800193c:	fa92 f2a2 	rbit	r2, r2
 8001940:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001944:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001948:	fab2 f282 	clz	r2, r2
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	f042 0220 	orr.w	r2, r2, #32
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	f002 021f 	and.w	r2, r2, #31
 8001958:	2101      	movs	r1, #1
 800195a:	fa01 f202 	lsl.w	r2, r1, r2
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ab      	beq.n	80018bc <HAL_RCC_OscConfig+0x1d0>
 8001964:	e05d      	b.n	8001a22 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff fa31 	bl	8000dcc <HAL_GetTick>
 800196a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fa2c 	bl	8000dcc <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b64      	cmp	r3, #100	; 0x64
 800197e:	d902      	bls.n	8001986 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	f000 bee9 	b.w	8002758 <HAL_RCC_OscConfig+0x106c>
 8001986:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800199a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	095b      	lsrs	r3, r3, #5
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d102      	bne.n	80019b8 <HAL_RCC_OscConfig+0x2cc>
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	e015      	b.n	80019e4 <HAL_RCC_OscConfig+0x2f8>
 80019b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019bc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019d4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_RCC_OscConfig+0x330>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019e8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80019ec:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019f0:	fa92 f2a2 	rbit	r2, r2
 80019f4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80019f8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80019fc:	fab2 f282 	clz	r2, r2
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	f042 0220 	orr.w	r2, r2, #32
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	f002 021f 	and.w	r2, r2, #31
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ab      	bne.n	8001970 <HAL_RCC_OscConfig+0x284>
 8001a18:	e003      	b.n	8001a22 <HAL_RCC_OscConfig+0x336>
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 817d 	beq.w	8001d32 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a38:	4ba6      	ldr	r3, [pc, #664]	; (8001cd4 <HAL_RCC_OscConfig+0x5e8>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a44:	4ba3      	ldr	r3, [pc, #652]	; (8001cd4 <HAL_RCC_OscConfig+0x5e8>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d172      	bne.n	8001b36 <HAL_RCC_OscConfig+0x44a>
 8001a50:	4ba0      	ldr	r3, [pc, #640]	; (8001cd4 <HAL_RCC_OscConfig+0x5e8>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d16c      	bne.n	8001b36 <HAL_RCC_OscConfig+0x44a>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d102      	bne.n	8001a8c <HAL_RCC_OscConfig+0x3a0>
 8001a86:	4b93      	ldr	r3, [pc, #588]	; (8001cd4 <HAL_RCC_OscConfig+0x5e8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	e013      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3c8>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001aa4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ab0:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x5e8>)
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001aba:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001abe:	fa92 f2a2 	rbit	r2, r2
 8001ac2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ac6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001aca:	fab2 f282 	clz	r2, r2
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f042 0220 	orr.w	r2, r2, #32
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	f002 021f 	and.w	r2, r2, #31
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <HAL_RCC_OscConfig+0x410>
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d002      	beq.n	8001afc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f000 be2e 	b.w	8002758 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afc:	4b75      	ldr	r3, [pc, #468]	; (8001cd4 <HAL_RCC_OscConfig+0x5e8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	21f8      	movs	r1, #248	; 0xf8
 8001b12:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b1a:	fa91 f1a1 	rbit	r1, r1
 8001b1e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b22:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b26:	fab1 f181 	clz	r1, r1
 8001b2a:	b2c9      	uxtb	r1, r1
 8001b2c:	408b      	lsls	r3, r1
 8001b2e:	4969      	ldr	r1, [pc, #420]	; (8001cd4 <HAL_RCC_OscConfig+0x5e8>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b34:	e0fd      	b.n	8001d32 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8088 	beq.w	8001c58 <HAL_RCC_OscConfig+0x56c>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b5a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2301      	movs	r3, #1
 8001b72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff f92a 	bl	8000dcc <HAL_GetTick>
 8001b78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7ff f925 	bl	8000dcc <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d902      	bls.n	8001b94 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	f000 bde2 	b.w	8002758 <HAL_RCC_OscConfig+0x106c>
 8001b94:	2302      	movs	r3, #2
 8001b96:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ba6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	095b      	lsrs	r3, r3, #5
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d102      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4d8>
 8001bbe:	4b45      	ldr	r3, [pc, #276]	; (8001cd4 <HAL_RCC_OscConfig+0x5e8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	e013      	b.n	8001bec <HAL_RCC_OscConfig+0x500>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001bdc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001be8:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_RCC_OscConfig+0x5e8>)
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	2202      	movs	r2, #2
 8001bee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001bf2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001bf6:	fa92 f2a2 	rbit	r2, r2
 8001bfa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001bfe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c02:	fab2 f282 	clz	r2, r2
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f042 0220 	orr.w	r2, r2, #32
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	f002 021f 	and.w	r2, r2, #31
 8001c12:	2101      	movs	r1, #1
 8001c14:	fa01 f202 	lsl.w	r2, r1, r2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0af      	beq.n	8001b7e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_RCC_OscConfig+0x5e8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	21f8      	movs	r1, #248	; 0xf8
 8001c34:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c3c:	fa91 f1a1 	rbit	r1, r1
 8001c40:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c44:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c48:	fab1 f181 	clz	r1, r1
 8001c4c:	b2c9      	uxtb	r1, r1
 8001c4e:	408b      	lsls	r3, r1
 8001c50:	4920      	ldr	r1, [pc, #128]	; (8001cd4 <HAL_RCC_OscConfig+0x5e8>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
 8001c56:	e06c      	b.n	8001d32 <HAL_RCC_OscConfig+0x646>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2300      	movs	r3, #0
 8001c82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff f8a2 	bl	8000dcc <HAL_GetTick>
 8001c88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8c:	e00a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7ff f89d 	bl	8000dcc <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d902      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	f000 bd5a 	b.w	8002758 <HAL_RCC_OscConfig+0x106c>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	095b      	lsrs	r3, r3, #5
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d104      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x5ec>
 8001cce:	4b01      	ldr	r3, [pc, #4]	; (8001cd4 <HAL_RCC_OscConfig+0x5e8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e015      	b.n	8001d00 <HAL_RCC_OscConfig+0x614>
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	2302      	movs	r3, #2
 8001cda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001cea:	2302      	movs	r3, #2
 8001cec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001cf0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001cfc:	4bc8      	ldr	r3, [pc, #800]	; (8002020 <HAL_RCC_OscConfig+0x934>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	2202      	movs	r2, #2
 8001d02:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d06:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d0a:	fa92 f2a2 	rbit	r2, r2
 8001d0e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d12:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d16:	fab2 f282 	clz	r2, r2
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	f042 0220 	orr.w	r2, r2, #32
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f002 021f 	and.w	r2, r2, #31
 8001d26:	2101      	movs	r1, #1
 8001d28:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1ad      	bne.n	8001c8e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8110 	beq.w	8001f68 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d079      	beq.n	8001e4c <HAL_RCC_OscConfig+0x760>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	4bab      	ldr	r3, [pc, #684]	; (8002024 <HAL_RCC_OscConfig+0x938>)
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2301      	movs	r3, #1
 8001d80:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7ff f823 	bl	8000dcc <HAL_GetTick>
 8001d86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7ff f81e 	bl	8000dcc <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d902      	bls.n	8001da2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f000 bcdb 	b.w	8002758 <HAL_RCC_OscConfig+0x106c>
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	fa93 f2a3 	rbit	r2, r3
 8001dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001de0:	2202      	movs	r2, #2
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	fa93 f2a3 	rbit	r2, r3
 8001df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001dfa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfc:	4b88      	ldr	r3, [pc, #544]	; (8002020 <HAL_RCC_OscConfig+0x934>)
 8001dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e08:	2102      	movs	r1, #2
 8001e0a:	6019      	str	r1, [r3, #0]
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f1a3 	rbit	r1, r3
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e22:	6019      	str	r1, [r3, #0]
  return result;
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0a0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x6a0>
 8001e4a:	e08d      	b.n	8001f68 <HAL_RCC_OscConfig+0x87c>
 8001e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e54:	2201      	movs	r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fa93 f2a3 	rbit	r2, r3
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e6e:	601a      	str	r2, [r3, #0]
  return result;
 8001e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e78:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b68      	ldr	r3, [pc, #416]	; (8002024 <HAL_RCC_OscConfig+0x938>)
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8e:	f7fe ff9d 	bl	8000dcc <HAL_GetTick>
 8001e92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e98:	f7fe ff98 	bl	8000dcc <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d902      	bls.n	8001eae <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	f000 bc55 	b.w	8002758 <HAL_RCC_OscConfig+0x106c>
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	fa93 f2a3 	rbit	r2, r3
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001eda:	2202      	movs	r2, #2
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	fa93 f2a3 	rbit	r2, r3
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001efe:	2202      	movs	r2, #2
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f2a3 	rbit	r2, r3
 8001f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f14:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <HAL_RCC_OscConfig+0x934>)
 8001f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f22:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f26:	2102      	movs	r1, #2
 8001f28:	6019      	str	r1, [r3, #0]
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f1a3 	rbit	r1, r3
 8001f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f40:	6019      	str	r1, [r3, #0]
  return result;
 8001f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f46:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d197      	bne.n	8001e98 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 81a1 	beq.w	80022c0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f84:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_RCC_OscConfig+0x934>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d116      	bne.n	8001fbe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f90:	4b23      	ldr	r3, [pc, #140]	; (8002020 <HAL_RCC_OscConfig+0x934>)
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	4a22      	ldr	r2, [pc, #136]	; (8002020 <HAL_RCC_OscConfig+0x934>)
 8001f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	61d3      	str	r3, [r2, #28]
 8001f9c:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_RCC_OscConfig+0x934>)
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001fb6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <HAL_RCC_OscConfig+0x93c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d11a      	bne.n	8002000 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_RCC_OscConfig+0x93c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <HAL_RCC_OscConfig+0x93c>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd6:	f7fe fef9 	bl	8000dcc <HAL_GetTick>
 8001fda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fde:	e009      	b.n	8001ff4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe0:	f7fe fef4 	bl	8000dcc <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b64      	cmp	r3, #100	; 0x64
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e3b1      	b.n	8002758 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <HAL_RCC_OscConfig+0x93c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0ef      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002004:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d10d      	bne.n	800202c <HAL_RCC_OscConfig+0x940>
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_RCC_OscConfig+0x934>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a02      	ldr	r2, [pc, #8]	; (8002020 <HAL_RCC_OscConfig+0x934>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6213      	str	r3, [r2, #32]
 800201c:	e03c      	b.n	8002098 <HAL_RCC_OscConfig+0x9ac>
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	10908120 	.word	0x10908120
 8002028:	40007000 	.word	0x40007000
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10c      	bne.n	8002056 <HAL_RCC_OscConfig+0x96a>
 800203c:	4bc1      	ldr	r3, [pc, #772]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4ac0      	ldr	r2, [pc, #768]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	4bbe      	ldr	r3, [pc, #760]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4abd      	ldr	r2, [pc, #756]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 800204e:	f023 0304 	bic.w	r3, r3, #4
 8002052:	6213      	str	r3, [r2, #32]
 8002054:	e020      	b.n	8002098 <HAL_RCC_OscConfig+0x9ac>
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b05      	cmp	r3, #5
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x994>
 8002066:	4bb7      	ldr	r3, [pc, #732]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4ab6      	ldr	r2, [pc, #728]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6213      	str	r3, [r2, #32]
 8002072:	4bb4      	ldr	r3, [pc, #720]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4ab3      	ldr	r2, [pc, #716]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6213      	str	r3, [r2, #32]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0x9ac>
 8002080:	4bb0      	ldr	r3, [pc, #704]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4aaf      	ldr	r2, [pc, #700]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	4bad      	ldr	r3, [pc, #692]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4aac      	ldr	r2, [pc, #688]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 8002092:	f023 0304 	bic.w	r3, r3, #4
 8002096:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8081 	beq.w	80021ac <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7fe fe8f 	bl	8000dcc <HAL_GetTick>
 80020ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b4:	f7fe fe8a 	bl	8000dcc <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e345      	b.n	8002758 <HAL_RCC_OscConfig+0x106c>
 80020cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020d4:	2202      	movs	r2, #2
 80020d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	fa93 f2a3 	rbit	r2, r3
 80020e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80020f8:	2202      	movs	r2, #2
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002100:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	fa93 f2a3 	rbit	r2, r3
 800210a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002112:	601a      	str	r2, [r3, #0]
  return result;
 8002114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002118:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800211c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d102      	bne.n	8002138 <HAL_RCC_OscConfig+0xa4c>
 8002132:	4b84      	ldr	r3, [pc, #528]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	e013      	b.n	8002160 <HAL_RCC_OscConfig+0xa74>
 8002138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002140:	2202      	movs	r2, #2
 8002142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fa93 f2a3 	rbit	r2, r3
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	4b79      	ldr	r3, [pc, #484]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002164:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002168:	2102      	movs	r1, #2
 800216a:	6011      	str	r1, [r2, #0]
 800216c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002170:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	fa92 f1a2 	rbit	r1, r2
 800217a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800217e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002182:	6011      	str	r1, [r2, #0]
  return result;
 8002184:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002188:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	fab2 f282 	clz	r2, r2
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f002 021f 	and.w	r2, r2, #31
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f202 	lsl.w	r2, r1, r2
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d084      	beq.n	80020b4 <HAL_RCC_OscConfig+0x9c8>
 80021aa:	e07f      	b.n	80022ac <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7fe fe0e 	bl	8000dcc <HAL_GetTick>
 80021b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fe09 	bl	8000dcc <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e2c4      	b.n	8002758 <HAL_RCC_OscConfig+0x106c>
 80021ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80021d6:	2202      	movs	r2, #2
 80021d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fa93 f2a3 	rbit	r2, r3
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021fa:	2202      	movs	r2, #2
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002202:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002214:	601a      	str	r2, [r3, #0]
  return result;
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800221e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	b2db      	uxtb	r3, r3
 800222a:	f043 0302 	orr.w	r3, r3, #2
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d102      	bne.n	800223a <HAL_RCC_OscConfig+0xb4e>
 8002234:	4b43      	ldr	r3, [pc, #268]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	e013      	b.n	8002262 <HAL_RCC_OscConfig+0xb76>
 800223a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002242:	2202      	movs	r2, #2
 8002244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fa93 f2a3 	rbit	r2, r3
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002266:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800226a:	2102      	movs	r1, #2
 800226c:	6011      	str	r1, [r2, #0]
 800226e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002272:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	fa92 f1a2 	rbit	r1, r2
 800227c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002280:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002284:	6011      	str	r1, [r2, #0]
  return result;
 8002286:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800228a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f002 021f 	and.w	r2, r2, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d184      	bne.n	80021b6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022ac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d105      	bne.n	80022c0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	4a22      	ldr	r2, [pc, #136]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 80022ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8242 	beq.w	8002756 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_RCC_OscConfig+0xc58>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b08      	cmp	r3, #8
 80022dc:	f000 8213 	beq.w	8002706 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	f040 8162 	bne.w	80025b6 <HAL_RCC_OscConfig+0xeca>
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80022fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002312:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002316:	601a      	str	r2, [r3, #0]
  return result;
 8002318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002320:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800232c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	461a      	mov	r2, r3
 8002334:	2300      	movs	r3, #0
 8002336:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fd48 	bl	8000dcc <HAL_GetTick>
 800233c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002340:	e00c      	b.n	800235c <HAL_RCC_OscConfig+0xc70>
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe fd40 	bl	8000dcc <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e1fd      	b.n	8002758 <HAL_RCC_OscConfig+0x106c>
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002364:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	fa93 f2a3 	rbit	r2, r3
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002380:	601a      	str	r2, [r3, #0]
  return result;
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800238a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_OscConfig+0xcba>
 80023a0:	4bb0      	ldr	r3, [pc, #704]	; (8002664 <HAL_RCC_OscConfig+0xf78>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	e027      	b.n	80023f6 <HAL_RCC_OscConfig+0xd0a>
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	fa93 f2a3 	rbit	r2, r3
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	fa93 f2a3 	rbit	r2, r3
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	4b9c      	ldr	r3, [pc, #624]	; (8002664 <HAL_RCC_OscConfig+0xf78>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80023fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002402:	6011      	str	r1, [r2, #0]
 8002404:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002408:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	fa92 f1a2 	rbit	r1, r2
 8002412:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002416:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800241a:	6011      	str	r1, [r2, #0]
  return result;
 800241c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002420:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	fab2 f282 	clz	r2, r2
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	f042 0220 	orr.w	r2, r2, #32
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f002 021f 	and.w	r2, r2, #31
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f202 	lsl.w	r2, r1, r2
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d182      	bne.n	8002348 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002442:	4b88      	ldr	r3, [pc, #544]	; (8002664 <HAL_RCC_OscConfig+0xf78>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800244a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	430b      	orrs	r3, r1
 8002464:	497f      	ldr	r1, [pc, #508]	; (8002664 <HAL_RCC_OscConfig+0xf78>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
 800246a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002472:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002476:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fa93 f2a3 	rbit	r2, r3
 8002486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800248e:	601a      	str	r2, [r3, #0]
  return result;
 8002490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002494:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002498:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	461a      	mov	r2, r3
 80024ac:	2301      	movs	r3, #1
 80024ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7fe fc8c 	bl	8000dcc <HAL_GetTick>
 80024b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b8:	e009      	b.n	80024ce <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe fc87 	bl	8000dcc <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e144      	b.n	8002758 <HAL_RCC_OscConfig+0x106c>
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024f2:	601a      	str	r2, [r3, #0]
  return result;
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80024fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d102      	bne.n	8002518 <HAL_RCC_OscConfig+0xe2c>
 8002512:	4b54      	ldr	r3, [pc, #336]	; (8002664 <HAL_RCC_OscConfig+0xf78>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	e027      	b.n	8002568 <HAL_RCC_OscConfig+0xe7c>
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002520:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002538:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_RCC_OscConfig+0xf78>)
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800256c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002570:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002574:	6011      	str	r1, [r2, #0]
 8002576:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800257a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	fa92 f1a2 	rbit	r1, r2
 8002584:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002588:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800258c:	6011      	str	r1, [r2, #0]
  return result;
 800258e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002592:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	fab2 f282 	clz	r2, r2
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	f042 0220 	orr.w	r2, r2, #32
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	f002 021f 	and.w	r2, r2, #31
 80025a8:	2101      	movs	r1, #1
 80025aa:	fa01 f202 	lsl.w	r2, r1, r2
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d082      	beq.n	80024ba <HAL_RCC_OscConfig+0xdce>
 80025b4:	e0cf      	b.n	8002756 <HAL_RCC_OscConfig+0x106a>
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80025be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	fa93 f2a3 	rbit	r2, r3
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025da:	601a      	str	r2, [r3, #0]
  return result;
 80025dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80025e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	461a      	mov	r2, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fbe6 	bl	8000dcc <HAL_GetTick>
 8002600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002604:	e009      	b.n	800261a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe fbe1 	bl	8000dcc <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e09e      	b.n	8002758 <HAL_RCC_OscConfig+0x106c>
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fa93 f2a3 	rbit	r2, r3
 8002636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800263e:	601a      	str	r2, [r3, #0]
  return result;
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002648:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d104      	bne.n	8002668 <HAL_RCC_OscConfig+0xf7c>
 800265e:	4b01      	ldr	r3, [pc, #4]	; (8002664 <HAL_RCC_OscConfig+0xf78>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	e029      	b.n	80026b8 <HAL_RCC_OscConfig+0xfcc>
 8002664:	40021000 	.word	0x40021000
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f2a3 	rbit	r2, r3
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	fa93 f2a3 	rbit	r2, r3
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_OscConfig+0x1078>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026bc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80026c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026c4:	6011      	str	r1, [r2, #0]
 80026c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ca:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	fa92 f1a2 	rbit	r1, r2
 80026d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026d8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026dc:	6011      	str	r1, [r2, #0]
  return result;
 80026de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026e2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	fab2 f282 	clz	r2, r2
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	f042 0220 	orr.w	r2, r2, #32
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	f002 021f 	and.w	r2, r2, #31
 80026f8:	2101      	movs	r1, #1
 80026fa:	fa01 f202 	lsl.w	r2, r1, r2
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d180      	bne.n	8002606 <HAL_RCC_OscConfig+0xf1a>
 8002704:	e027      	b.n	8002756 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e01e      	b.n	8002758 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_OscConfig+0x1078>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002722:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002726:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800272a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	429a      	cmp	r2, r3
 8002738:	d10b      	bne.n	8002752 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800273a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800273e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800274e:	429a      	cmp	r2, r3
 8002750:	d001      	beq.n	8002756 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000

08002768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b09e      	sub	sp, #120	; 0x78
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e162      	b.n	8002a46 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002780:	4b90      	ldr	r3, [pc, #576]	; (80029c4 <HAL_RCC_ClockConfig+0x25c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d910      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b8d      	ldr	r3, [pc, #564]	; (80029c4 <HAL_RCC_ClockConfig+0x25c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 0207 	bic.w	r2, r3, #7
 8002796:	498b      	ldr	r1, [pc, #556]	; (80029c4 <HAL_RCC_ClockConfig+0x25c>)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b89      	ldr	r3, [pc, #548]	; (80029c4 <HAL_RCC_ClockConfig+0x25c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e14a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b82      	ldr	r3, [pc, #520]	; (80029c8 <HAL_RCC_ClockConfig+0x260>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	497f      	ldr	r1, [pc, #508]	; (80029c8 <HAL_RCC_ClockConfig+0x260>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80dc 	beq.w	8002994 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d13c      	bne.n	800285e <HAL_RCC_ClockConfig+0xf6>
 80027e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d102      	bne.n	800280e <HAL_RCC_ClockConfig+0xa6>
 8002808:	4b6f      	ldr	r3, [pc, #444]	; (80029c8 <HAL_RCC_ClockConfig+0x260>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	e00f      	b.n	800282e <HAL_RCC_ClockConfig+0xc6>
 800280e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002812:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	667b      	str	r3, [r7, #100]	; 0x64
 800281c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002820:	663b      	str	r3, [r7, #96]	; 0x60
 8002822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	65fb      	str	r3, [r7, #92]	; 0x5c
 800282a:	4b67      	ldr	r3, [pc, #412]	; (80029c8 <HAL_RCC_ClockConfig+0x260>)
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002832:	65ba      	str	r2, [r7, #88]	; 0x58
 8002834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002836:	fa92 f2a2 	rbit	r2, r2
 800283a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800283c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800283e:	fab2 f282 	clz	r2, r2
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f042 0220 	orr.w	r2, r2, #32
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	f002 021f 	and.w	r2, r2, #31
 800284e:	2101      	movs	r1, #1
 8002850:	fa01 f202 	lsl.w	r2, r1, r2
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d17b      	bne.n	8002952 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e0f3      	b.n	8002a46 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d13c      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x178>
 8002866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800286a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d102      	bne.n	8002890 <HAL_RCC_ClockConfig+0x128>
 800288a:	4b4f      	ldr	r3, [pc, #316]	; (80029c8 <HAL_RCC_ClockConfig+0x260>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	e00f      	b.n	80028b0 <HAL_RCC_ClockConfig+0x148>
 8002890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002894:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	647b      	str	r3, [r7, #68]	; 0x44
 800289e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a2:	643b      	str	r3, [r7, #64]	; 0x40
 80028a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ac:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <HAL_RCC_ClockConfig+0x260>)
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80028b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028b8:	fa92 f2a2 	rbit	r2, r2
 80028bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c0:	fab2 f282 	clz	r2, r2
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	f042 0220 	orr.w	r2, r2, #32
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	f002 021f 	and.w	r2, r2, #31
 80028d0:	2101      	movs	r1, #1
 80028d2:	fa01 f202 	lsl.w	r2, r1, r2
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d13a      	bne.n	8002952 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0b2      	b.n	8002a46 <HAL_RCC_ClockConfig+0x2de>
 80028e0:	2302      	movs	r3, #2
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d102      	bne.n	8002908 <HAL_RCC_ClockConfig+0x1a0>
 8002902:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <HAL_RCC_ClockConfig+0x260>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	e00d      	b.n	8002924 <HAL_RCC_ClockConfig+0x1bc>
 8002908:	2302      	movs	r3, #2
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	2302      	movs	r3, #2
 8002916:	623b      	str	r3, [r7, #32]
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <HAL_RCC_ClockConfig+0x260>)
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	2202      	movs	r2, #2
 8002926:	61ba      	str	r2, [r7, #24]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	fa92 f2a2 	rbit	r2, r2
 800292e:	617a      	str	r2, [r7, #20]
  return result;
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	fab2 f282 	clz	r2, r2
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f042 0220 	orr.w	r2, r2, #32
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f002 021f 	and.w	r2, r2, #31
 8002942:	2101      	movs	r1, #1
 8002944:	fa01 f202 	lsl.w	r2, r1, r2
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e079      	b.n	8002a46 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCC_ClockConfig+0x260>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f023 0203 	bic.w	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	491a      	ldr	r1, [pc, #104]	; (80029c8 <HAL_RCC_ClockConfig+0x260>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002964:	f7fe fa32 	bl	8000dcc <HAL_GetTick>
 8002968:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	e00a      	b.n	8002982 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296c:	f7fe fa2e 	bl	8000dcc <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e061      	b.n	8002a46 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_RCC_ClockConfig+0x260>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 020c 	and.w	r2, r3, #12
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	429a      	cmp	r2, r3
 8002992:	d1eb      	bne.n	800296c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_ClockConfig+0x25c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d214      	bcs.n	80029cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_RCC_ClockConfig+0x25c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 0207 	bic.w	r2, r3, #7
 80029aa:	4906      	ldr	r1, [pc, #24]	; (80029c4 <HAL_RCC_ClockConfig+0x25c>)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <HAL_RCC_ClockConfig+0x25c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e040      	b.n	8002a46 <HAL_RCC_ClockConfig+0x2de>
 80029c4:	40022000 	.word	0x40022000
 80029c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d8:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_RCC_ClockConfig+0x2e8>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	491a      	ldr	r1, [pc, #104]	; (8002a50 <HAL_RCC_ClockConfig+0x2e8>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f6:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <HAL_RCC_ClockConfig+0x2e8>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4912      	ldr	r1, [pc, #72]	; (8002a50 <HAL_RCC_ClockConfig+0x2e8>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a0a:	f000 f829 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002a0e:	4601      	mov	r1, r0
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <HAL_RCC_ClockConfig+0x2e8>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a18:	22f0      	movs	r2, #240	; 0xf0
 8002a1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	fa92 f2a2 	rbit	r2, r2
 8002a22:	60fa      	str	r2, [r7, #12]
  return result;
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	fab2 f282 	clz	r2, r2
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	40d3      	lsrs	r3, r2
 8002a2e:	4a09      	ldr	r2, [pc, #36]	; (8002a54 <HAL_RCC_ClockConfig+0x2ec>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	fa21 f303 	lsr.w	r3, r1, r3
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <HAL_RCC_ClockConfig+0x2f0>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <HAL_RCC_ClockConfig+0x2f4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe f898 	bl	8000b74 <HAL_InitTick>
  
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3778      	adds	r7, #120	; 0x78
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08007410 	.word	0x08007410
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b08b      	sub	sp, #44	; 0x2c
 8002a64:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a7a:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d002      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x30>
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d003      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0x36>
 8002a8e:	e03c      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a90:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a92:	623b      	str	r3, [r7, #32]
      break;
 8002a94:	e03c      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002aa0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	fa92 f2a2 	rbit	r2, r2
 8002aa8:	607a      	str	r2, [r7, #4]
  return result;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	fab2 f282 	clz	r2, r2
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	40d3      	lsrs	r3, r2
 8002ab4:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
 8002ab8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	fa92 f2a2 	rbit	r2, r2
 8002acc:	60fa      	str	r2, [r7, #12]
  return result;
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	fab2 f282 	clz	r2, r2
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	40d3      	lsrs	r3, r2
 8002ad8:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ae8:	4a0e      	ldr	r2, [pc, #56]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
 8002af8:	e004      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	623b      	str	r3, [r7, #32]
      break;
 8002b08:	e002      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b0c:	623b      	str	r3, [r7, #32]
      break;
 8002b0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b10:	6a3b      	ldr	r3, [r7, #32]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	372c      	adds	r7, #44	; 0x2c
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	007a1200 	.word	0x007a1200
 8002b28:	08007428 	.word	0x08007428
 8002b2c:	08007438 	.word	0x08007438
 8002b30:	003d0900 	.word	0x003d0900

08002b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000000 	.word	0x20000000

08002b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b52:	f7ff ffef 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b56:	4601      	mov	r1, r0
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b60:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	fa92 f2a2 	rbit	r2, r2
 8002b6c:	603a      	str	r2, [r7, #0]
  return result;
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	fab2 f282 	clz	r2, r2
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	40d3      	lsrs	r3, r2
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b7a:	5cd3      	ldrb	r3, [r2, r3]
 8002b7c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08007420 	.word	0x08007420

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b96:	f7ff ffcd 	bl	8002b34 <HAL_RCC_GetHCLKFreq>
 8002b9a:	4601      	mov	r1, r0
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ba4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ba8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	fa92 f2a2 	rbit	r2, r2
 8002bb0:	603a      	str	r2, [r7, #0]
  return result;
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	fab2 f282 	clz	r2, r2
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	40d3      	lsrs	r3, r2
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bbe:	5cd3      	ldrb	r3, [r2, r3]
 8002bc0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	08007420 	.word	0x08007420

08002bd4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	220f      	movs	r2, #15
 8002be2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_RCC_GetClockConfig+0x5c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0203 	and.w	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <HAL_RCC_GetClockConfig+0x5c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_RCC_GetClockConfig+0x5c>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_GetClockConfig+0x5c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <HAL_RCC_GetClockConfig+0x60>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0207 	and.w	r2, r3, #7
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	601a      	str	r2, [r3, #0]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40022000 	.word	0x40022000

08002c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b092      	sub	sp, #72	; 0x48
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80d4 	beq.w	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5c:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10e      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c68:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	4a4a      	ldr	r2, [pc, #296]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c72:	61d3      	str	r3, [r2, #28]
 8002c74:	4b48      	ldr	r3, [pc, #288]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	4b45      	ldr	r3, [pc, #276]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c92:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a41      	ldr	r2, [pc, #260]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe f895 	bl	8000dcc <HAL_GetTick>
 8002ca2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fe f891 	bl	8000dcc <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	; 0x64
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e169      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cc4:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8084 	beq.w	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d07c      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2301      	movs	r3, #1
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	461a      	mov	r2, r3
 8002d32:	2300      	movs	r3, #0
 8002d34:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d04b      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe f841 	bl	8000dcc <HAL_GetTick>
 8002d4a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fe f83d 	bl	8000dcc <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e113      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002d64:	2302      	movs	r3, #2
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	2302      	movs	r3, #2
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d108      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d92:	4b01      	ldr	r3, [pc, #4]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	e00d      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	10908100 	.word	0x10908100
 8002da4:	2302      	movs	r3, #2
 8002da6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	4b78      	ldr	r3, [pc, #480]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2202      	movs	r2, #2
 8002db6:	613a      	str	r2, [r7, #16]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	fa92 f2a2 	rbit	r2, r2
 8002dbe:	60fa      	str	r2, [r7, #12]
  return result;
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f002 021f 	and.w	r2, r2, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0b7      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dde:	4b6d      	ldr	r3, [pc, #436]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	496a      	ldr	r1, [pc, #424]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002df0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d105      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df8:	4b66      	ldr	r3, [pc, #408]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	4a65      	ldr	r2, [pc, #404]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e10:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f023 0203 	bic.w	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	495d      	ldr	r1, [pc, #372]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e2e:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	4956      	ldr	r1, [pc, #344]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e4c:	4b51      	ldr	r3, [pc, #324]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	494e      	ldr	r1, [pc, #312]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f023 0210 	bic.w	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4947      	ldr	r1, [pc, #284]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e88:	4b42      	ldr	r3, [pc, #264]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	493f      	ldr	r1, [pc, #252]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ea6:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f023 0220 	bic.w	r2, r3, #32
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4938      	ldr	r1, [pc, #224]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ec4:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	4930      	ldr	r1, [pc, #192]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ee2:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	4929      	ldr	r1, [pc, #164]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f00:	4b24      	ldr	r3, [pc, #144]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	4921      	ldr	r1, [pc, #132]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	491a      	ldr	r1, [pc, #104]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f3c:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	4912      	ldr	r1, [pc, #72]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	490b      	ldr	r1, [pc, #44]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	4903      	ldr	r1, [pc, #12]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3748      	adds	r7, #72	; 0x48
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e09d      	b.n	80030e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d108      	bne.n	8002fc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fba:	d009      	beq.n	8002fd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
 8002fc2:	e005      	b.n	8002fd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd fcf8 	bl	80009e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003006:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003010:	d902      	bls.n	8003018 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	e002      	b.n	800301e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003026:	d007      	beq.n	8003038 <HAL_SPI_Init+0xa0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003030:	d002      	beq.n	8003038 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	ea42 0103 	orr.w	r1, r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	0c1b      	lsrs	r3, r3, #16
 8003094:	f003 0204 	and.w	r2, r3, #4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030b4:	ea42 0103 	orr.w	r1, r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e049      	b.n	8003194 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f841 	bl	800319c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f000 f9f1 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d001      	beq.n	80031c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e04a      	b.n	800325e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a21      	ldr	r2, [pc, #132]	; (800326c <HAL_TIM_Base_Start_IT+0xbc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d018      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x6c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f2:	d013      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x6c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <HAL_TIM_Base_Start_IT+0xc0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00e      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x6c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <HAL_TIM_Base_Start_IT+0xc4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d009      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x6c>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <HAL_TIM_Base_Start_IT+0xc8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d004      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x6c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a19      	ldr	r2, [pc, #100]	; (800327c <HAL_TIM_Base_Start_IT+0xcc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d115      	bne.n	8003248 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HAL_TIM_Base_Start_IT+0xd0>)
 8003224:	4013      	ands	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b06      	cmp	r3, #6
 800322c:	d015      	beq.n	800325a <HAL_TIM_Base_Start_IT+0xaa>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003234:	d011      	beq.n	800325a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0201 	orr.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003246:	e008      	b.n	800325a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e000      	b.n	800325c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800
 8003278:	40013400 	.word	0x40013400
 800327c:	40014000 	.word	0x40014000
 8003280:	00010007 	.word	0x00010007

08003284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b02      	cmp	r3, #2
 8003298:	d122      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d11b      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0202 	mvn.w	r2, #2
 80032b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f905 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 80032cc:	e005      	b.n	80032da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f8f7 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f908 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d122      	bne.n	8003334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d11b      	bne.n	8003334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0204 	mvn.w	r2, #4
 8003304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2202      	movs	r2, #2
 800330a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f8db 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 8003320:	e005      	b.n	800332e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8cd 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f8de 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b08      	cmp	r3, #8
 8003340:	d122      	bne.n	8003388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b08      	cmp	r3, #8
 800334e:	d11b      	bne.n	8003388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0208 	mvn.w	r2, #8
 8003358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2204      	movs	r2, #4
 800335e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8b1 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8a3 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f8b4 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b10      	cmp	r3, #16
 8003394:	d122      	bne.n	80033dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d11b      	bne.n	80033dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0210 	mvn.w	r2, #16
 80033ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2208      	movs	r2, #8
 80033b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f887 	bl	80034d6 <HAL_TIM_IC_CaptureCallback>
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f879 	bl	80034c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f88a 	bl	80034ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d10e      	bne.n	8003408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0201 	mvn.w	r2, #1
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fd fa68 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003412:	2b80      	cmp	r3, #128	; 0x80
 8003414:	d10e      	bne.n	8003434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003420:	2b80      	cmp	r3, #128	; 0x80
 8003422:	d107      	bne.n	8003434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800342c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f90a 	bl	8003648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003442:	d10e      	bne.n	8003462 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	2b80      	cmp	r3, #128	; 0x80
 8003450:	d107      	bne.n	8003462 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800345a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f8fd 	bl	800365c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d10e      	bne.n	800348e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d107      	bne.n	800348e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f838 	bl	80034fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b20      	cmp	r3, #32
 800349a:	d10e      	bne.n	80034ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d107      	bne.n	80034ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f06f 0220 	mvn.w	r2, #32
 80034b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f8bd 	bl	8003634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3c      	ldr	r2, [pc, #240]	; (8003618 <TIM_Base_SetConfig+0x104>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00f      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003532:	d00b      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a39      	ldr	r2, [pc, #228]	; (800361c <TIM_Base_SetConfig+0x108>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a38      	ldr	r2, [pc, #224]	; (8003620 <TIM_Base_SetConfig+0x10c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0x38>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a37      	ldr	r2, [pc, #220]	; (8003624 <TIM_Base_SetConfig+0x110>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d108      	bne.n	800355e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2d      	ldr	r2, [pc, #180]	; (8003618 <TIM_Base_SetConfig+0x104>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01b      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356c:	d017      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2a      	ldr	r2, [pc, #168]	; (800361c <TIM_Base_SetConfig+0x108>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a29      	ldr	r2, [pc, #164]	; (8003620 <TIM_Base_SetConfig+0x10c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00f      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a28      	ldr	r2, [pc, #160]	; (8003624 <TIM_Base_SetConfig+0x110>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00b      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a27      	ldr	r2, [pc, #156]	; (8003628 <TIM_Base_SetConfig+0x114>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a26      	ldr	r2, [pc, #152]	; (800362c <TIM_Base_SetConfig+0x118>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <TIM_Base_SetConfig+0x8a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a25      	ldr	r2, [pc, #148]	; (8003630 <TIM_Base_SetConfig+0x11c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d108      	bne.n	80035b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <TIM_Base_SetConfig+0x104>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00f      	beq.n	80035fc <TIM_Base_SetConfig+0xe8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a11      	ldr	r2, [pc, #68]	; (8003624 <TIM_Base_SetConfig+0x110>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00b      	beq.n	80035fc <TIM_Base_SetConfig+0xe8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a10      	ldr	r2, [pc, #64]	; (8003628 <TIM_Base_SetConfig+0x114>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d007      	beq.n	80035fc <TIM_Base_SetConfig+0xe8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a0f      	ldr	r2, [pc, #60]	; (800362c <TIM_Base_SetConfig+0x118>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_Base_SetConfig+0xe8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <TIM_Base_SetConfig+0x11c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d103      	bne.n	8003604 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	615a      	str	r2, [r3, #20]
}
 800360a:	bf00      	nop
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800
 8003624:	40013400 	.word	0x40013400
 8003628:	40014000 	.word	0x40014000
 800362c:	40014400 	.word	0x40014400
 8003630:	40014800 	.word	0x40014800

08003634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e040      	b.n	8003704 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd f9e6 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	; 0x24
 800369c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0201 	bic.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8b6 	bl	8003820 <UART_SetConfig>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e022      	b.n	8003704 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa7e 	bl	8003bc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fb05 	bl	8003d0c <UART_CheckIdleState>
 8003702:	4603      	mov	r3, r0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	; 0x28
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003720:	2b20      	cmp	r3, #32
 8003722:	d178      	bne.n	8003816 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_UART_Transmit+0x24>
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e071      	b.n	8003818 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2221      	movs	r2, #33	; 0x21
 8003740:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003742:	f7fd fb43 	bl	8000dcc <HAL_GetTick>
 8003746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	88fa      	ldrh	r2, [r7, #6]
 8003754:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003760:	d108      	bne.n	8003774 <HAL_UART_Transmit+0x68>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d104      	bne.n	8003774 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	e003      	b.n	800377c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800377c:	e030      	b.n	80037e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2200      	movs	r2, #0
 8003786:	2180      	movs	r1, #128	; 0x80
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fb67 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2220      	movs	r2, #32
 8003798:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e03c      	b.n	8003818 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10b      	bne.n	80037bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	881a      	ldrh	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037b0:	b292      	uxth	r2, r2
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	3302      	adds	r3, #2
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	e008      	b.n	80037ce <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	781a      	ldrb	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	b292      	uxth	r2, r2
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	3301      	adds	r3, #1
 80037cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1c8      	bne.n	800377e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2200      	movs	r2, #0
 80037f4:	2140      	movs	r1, #64	; 0x40
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fb30 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e005      	b.n	8003818 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e000      	b.n	8003818 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003816:	2302      	movs	r3, #2
  }
}
 8003818:	4618      	mov	r0, r3
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800384e:	f023 030c 	bic.w	r3, r3, #12
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	6979      	ldr	r1, [r7, #20]
 8003858:	430b      	orrs	r3, r1
 800385a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	430a      	orrs	r2, r1
 8003894:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4aa7      	ldr	r2, [pc, #668]	; (8003b38 <UART_SetConfig+0x318>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d120      	bne.n	80038e2 <UART_SetConfig+0xc2>
 80038a0:	4ba6      	ldr	r3, [pc, #664]	; (8003b3c <UART_SetConfig+0x31c>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d817      	bhi.n	80038dc <UART_SetConfig+0xbc>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <UART_SetConfig+0x94>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038c5 	.word	0x080038c5
 80038b8:	080038d1 	.word	0x080038d1
 80038bc:	080038d7 	.word	0x080038d7
 80038c0:	080038cb 	.word	0x080038cb
 80038c4:	2301      	movs	r3, #1
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e0b5      	b.n	8003a36 <UART_SetConfig+0x216>
 80038ca:	2302      	movs	r3, #2
 80038cc:	77fb      	strb	r3, [r7, #31]
 80038ce:	e0b2      	b.n	8003a36 <UART_SetConfig+0x216>
 80038d0:	2304      	movs	r3, #4
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e0af      	b.n	8003a36 <UART_SetConfig+0x216>
 80038d6:	2308      	movs	r3, #8
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e0ac      	b.n	8003a36 <UART_SetConfig+0x216>
 80038dc:	2310      	movs	r3, #16
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e0a9      	b.n	8003a36 <UART_SetConfig+0x216>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a96      	ldr	r2, [pc, #600]	; (8003b40 <UART_SetConfig+0x320>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d124      	bne.n	8003936 <UART_SetConfig+0x116>
 80038ec:	4b93      	ldr	r3, [pc, #588]	; (8003b3c <UART_SetConfig+0x31c>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038f8:	d011      	beq.n	800391e <UART_SetConfig+0xfe>
 80038fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038fe:	d817      	bhi.n	8003930 <UART_SetConfig+0x110>
 8003900:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003904:	d011      	beq.n	800392a <UART_SetConfig+0x10a>
 8003906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800390a:	d811      	bhi.n	8003930 <UART_SetConfig+0x110>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <UART_SetConfig+0xf8>
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003914:	d006      	beq.n	8003924 <UART_SetConfig+0x104>
 8003916:	e00b      	b.n	8003930 <UART_SetConfig+0x110>
 8003918:	2300      	movs	r3, #0
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e08b      	b.n	8003a36 <UART_SetConfig+0x216>
 800391e:	2302      	movs	r3, #2
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e088      	b.n	8003a36 <UART_SetConfig+0x216>
 8003924:	2304      	movs	r3, #4
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e085      	b.n	8003a36 <UART_SetConfig+0x216>
 800392a:	2308      	movs	r3, #8
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e082      	b.n	8003a36 <UART_SetConfig+0x216>
 8003930:	2310      	movs	r3, #16
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e07f      	b.n	8003a36 <UART_SetConfig+0x216>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a82      	ldr	r2, [pc, #520]	; (8003b44 <UART_SetConfig+0x324>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d124      	bne.n	800398a <UART_SetConfig+0x16a>
 8003940:	4b7e      	ldr	r3, [pc, #504]	; (8003b3c <UART_SetConfig+0x31c>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003948:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800394c:	d011      	beq.n	8003972 <UART_SetConfig+0x152>
 800394e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003952:	d817      	bhi.n	8003984 <UART_SetConfig+0x164>
 8003954:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003958:	d011      	beq.n	800397e <UART_SetConfig+0x15e>
 800395a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800395e:	d811      	bhi.n	8003984 <UART_SetConfig+0x164>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <UART_SetConfig+0x14c>
 8003964:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003968:	d006      	beq.n	8003978 <UART_SetConfig+0x158>
 800396a:	e00b      	b.n	8003984 <UART_SetConfig+0x164>
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e061      	b.n	8003a36 <UART_SetConfig+0x216>
 8003972:	2302      	movs	r3, #2
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e05e      	b.n	8003a36 <UART_SetConfig+0x216>
 8003978:	2304      	movs	r3, #4
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e05b      	b.n	8003a36 <UART_SetConfig+0x216>
 800397e:	2308      	movs	r3, #8
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e058      	b.n	8003a36 <UART_SetConfig+0x216>
 8003984:	2310      	movs	r3, #16
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e055      	b.n	8003a36 <UART_SetConfig+0x216>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6e      	ldr	r2, [pc, #440]	; (8003b48 <UART_SetConfig+0x328>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d124      	bne.n	80039de <UART_SetConfig+0x1be>
 8003994:	4b69      	ldr	r3, [pc, #420]	; (8003b3c <UART_SetConfig+0x31c>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800399c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039a0:	d011      	beq.n	80039c6 <UART_SetConfig+0x1a6>
 80039a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039a6:	d817      	bhi.n	80039d8 <UART_SetConfig+0x1b8>
 80039a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ac:	d011      	beq.n	80039d2 <UART_SetConfig+0x1b2>
 80039ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039b2:	d811      	bhi.n	80039d8 <UART_SetConfig+0x1b8>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <UART_SetConfig+0x1a0>
 80039b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039bc:	d006      	beq.n	80039cc <UART_SetConfig+0x1ac>
 80039be:	e00b      	b.n	80039d8 <UART_SetConfig+0x1b8>
 80039c0:	2300      	movs	r3, #0
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e037      	b.n	8003a36 <UART_SetConfig+0x216>
 80039c6:	2302      	movs	r3, #2
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e034      	b.n	8003a36 <UART_SetConfig+0x216>
 80039cc:	2304      	movs	r3, #4
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e031      	b.n	8003a36 <UART_SetConfig+0x216>
 80039d2:	2308      	movs	r3, #8
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e02e      	b.n	8003a36 <UART_SetConfig+0x216>
 80039d8:	2310      	movs	r3, #16
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e02b      	b.n	8003a36 <UART_SetConfig+0x216>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a5a      	ldr	r2, [pc, #360]	; (8003b4c <UART_SetConfig+0x32c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d124      	bne.n	8003a32 <UART_SetConfig+0x212>
 80039e8:	4b54      	ldr	r3, [pc, #336]	; (8003b3c <UART_SetConfig+0x31c>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80039f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039f4:	d011      	beq.n	8003a1a <UART_SetConfig+0x1fa>
 80039f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039fa:	d817      	bhi.n	8003a2c <UART_SetConfig+0x20c>
 80039fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a00:	d011      	beq.n	8003a26 <UART_SetConfig+0x206>
 8003a02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a06:	d811      	bhi.n	8003a2c <UART_SetConfig+0x20c>
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <UART_SetConfig+0x1f4>
 8003a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a10:	d006      	beq.n	8003a20 <UART_SetConfig+0x200>
 8003a12:	e00b      	b.n	8003a2c <UART_SetConfig+0x20c>
 8003a14:	2300      	movs	r3, #0
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e00d      	b.n	8003a36 <UART_SetConfig+0x216>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e00a      	b.n	8003a36 <UART_SetConfig+0x216>
 8003a20:	2304      	movs	r3, #4
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e007      	b.n	8003a36 <UART_SetConfig+0x216>
 8003a26:	2308      	movs	r3, #8
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e004      	b.n	8003a36 <UART_SetConfig+0x216>
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e001      	b.n	8003a36 <UART_SetConfig+0x216>
 8003a32:	2310      	movs	r3, #16
 8003a34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3e:	d15b      	bne.n	8003af8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003a40:	7ffb      	ldrb	r3, [r7, #31]
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d827      	bhi.n	8003a96 <UART_SetConfig+0x276>
 8003a46:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <UART_SetConfig+0x22c>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a71 	.word	0x08003a71
 8003a50:	08003a79 	.word	0x08003a79
 8003a54:	08003a81 	.word	0x08003a81
 8003a58:	08003a97 	.word	0x08003a97
 8003a5c:	08003a87 	.word	0x08003a87
 8003a60:	08003a97 	.word	0x08003a97
 8003a64:	08003a97 	.word	0x08003a97
 8003a68:	08003a97 	.word	0x08003a97
 8003a6c:	08003a8f 	.word	0x08003a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a70:	f7ff f86c 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8003a74:	61b8      	str	r0, [r7, #24]
        break;
 8003a76:	e013      	b.n	8003aa0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a78:	f7ff f88a 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8003a7c:	61b8      	str	r0, [r7, #24]
        break;
 8003a7e:	e00f      	b.n	8003aa0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a80:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <UART_SetConfig+0x330>)
 8003a82:	61bb      	str	r3, [r7, #24]
        break;
 8003a84:	e00c      	b.n	8003aa0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a86:	f7fe ffeb 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8003a8a:	61b8      	str	r0, [r7, #24]
        break;
 8003a8c:	e008      	b.n	8003aa0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a92:	61bb      	str	r3, [r7, #24]
        break;
 8003a94:	e004      	b.n	8003aa0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	77bb      	strb	r3, [r7, #30]
        break;
 8003a9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 8082 	beq.w	8003bac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	005a      	lsls	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	441a      	add	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b0f      	cmp	r3, #15
 8003ac2:	d916      	bls.n	8003af2 <UART_SetConfig+0x2d2>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aca:	d212      	bcs.n	8003af2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f023 030f 	bic.w	r3, r3, #15
 8003ad4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	89fb      	ldrh	r3, [r7, #14]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	89fa      	ldrh	r2, [r7, #14]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	e05c      	b.n	8003bac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	77bb      	strb	r3, [r7, #30]
 8003af6:	e059      	b.n	8003bac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003af8:	7ffb      	ldrb	r3, [r7, #31]
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d835      	bhi.n	8003b6a <UART_SetConfig+0x34a>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <UART_SetConfig+0x2e4>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b29 	.word	0x08003b29
 8003b08:	08003b31 	.word	0x08003b31
 8003b0c:	08003b55 	.word	0x08003b55
 8003b10:	08003b6b 	.word	0x08003b6b
 8003b14:	08003b5b 	.word	0x08003b5b
 8003b18:	08003b6b 	.word	0x08003b6b
 8003b1c:	08003b6b 	.word	0x08003b6b
 8003b20:	08003b6b 	.word	0x08003b6b
 8003b24:	08003b63 	.word	0x08003b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b28:	f7ff f810 	bl	8002b4c <HAL_RCC_GetPCLK1Freq>
 8003b2c:	61b8      	str	r0, [r7, #24]
        break;
 8003b2e:	e021      	b.n	8003b74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b30:	f7ff f82e 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8003b34:	61b8      	str	r0, [r7, #24]
        break;
 8003b36:	e01d      	b.n	8003b74 <UART_SetConfig+0x354>
 8003b38:	40013800 	.word	0x40013800
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40004400 	.word	0x40004400
 8003b44:	40004800 	.word	0x40004800
 8003b48:	40004c00 	.word	0x40004c00
 8003b4c:	40005000 	.word	0x40005000
 8003b50:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <UART_SetConfig+0x3a4>)
 8003b56:	61bb      	str	r3, [r7, #24]
        break;
 8003b58:	e00c      	b.n	8003b74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5a:	f7fe ff81 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8003b5e:	61b8      	str	r0, [r7, #24]
        break;
 8003b60:	e008      	b.n	8003b74 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b66:	61bb      	str	r3, [r7, #24]
        break;
 8003b68:	e004      	b.n	8003b74 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	77bb      	strb	r3, [r7, #30]
        break;
 8003b72:	bf00      	nop
    }

    if (pclk != 0U)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d018      	beq.n	8003bac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	085a      	lsrs	r2, r3, #1
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	441a      	add	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b0f      	cmp	r3, #15
 8003b92:	d909      	bls.n	8003ba8 <UART_SetConfig+0x388>
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9a:	d205      	bcs.n	8003ba8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	e001      	b.n	8003bac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003bb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3720      	adds	r7, #32
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	007a1200 	.word	0x007a1200

08003bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01a      	beq.n	8003cde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc6:	d10a      	bne.n	8003cde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	605a      	str	r2, [r3, #4]
  }
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b098      	sub	sp, #96	; 0x60
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d1c:	f7fd f856 	bl	8000dcc <HAL_GetTick>
 8003d20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d12e      	bne.n	8003d8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f88c 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d021      	beq.n	8003d8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d68:	647b      	str	r3, [r7, #68]	; 0x44
 8003d6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e6      	bne.n	8003d4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e062      	b.n	8003e54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d149      	bne.n	8003e30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da4:	2200      	movs	r2, #0
 8003da6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f856 	bl	8003e5c <UART_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d03c      	beq.n	8003e30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	623b      	str	r3, [r7, #32]
   return(result);
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8003dd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e6      	bne.n	8003db6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3308      	adds	r3, #8
 8003dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3308      	adds	r3, #8
 8003e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e08:	61fa      	str	r2, [r7, #28]
 8003e0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	69b9      	ldr	r1, [r7, #24]
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	617b      	str	r3, [r7, #20]
   return(result);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e011      	b.n	8003e54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3758      	adds	r7, #88	; 0x58
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6c:	e049      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d045      	beq.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7fc ffa9 	bl	8000dcc <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e048      	b.n	8003f22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d031      	beq.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d110      	bne.n	8003ece <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f838 	bl	8003f2a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e029      	b.n	8003f22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003edc:	d111      	bne.n	8003f02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f81e 	bl	8003f2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e00f      	b.n	8003f22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	bf0c      	ite	eq
 8003f12:	2301      	moveq	r3, #1
 8003f14:	2300      	movne	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d0a6      	beq.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b095      	sub	sp, #84	; 0x54
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f50:	643b      	str	r3, [r7, #64]	; 0x40
 8003f52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e6      	bne.n	8003f32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3308      	adds	r3, #8
 8003f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e5      	bne.n	8003f64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d118      	bne.n	8003fd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f023 0310 	bic.w	r3, r3, #16
 8003fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6979      	ldr	r1, [r7, #20]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	613b      	str	r3, [r7, #16]
   return(result);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e6      	bne.n	8003fa0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fe6:	bf00      	nop
 8003fe8:	3754      	adds	r7, #84	; 0x54
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ffa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ffe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	b29b      	uxth	r3, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	b29b      	uxth	r3, r3
 8004010:	4013      	ands	r3, r2
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004028:	b084      	sub	sp, #16
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	f107 0014 	add.w	r0, r7, #20
 8004036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	b004      	add	sp, #16
 8004068:	4770      	bx	lr

0800406a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	4603      	mov	r3, r0
 8004072:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800407c:	2b84      	cmp	r3, #132	; 0x84
 800407e:	d005      	beq.n	800408c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004080:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	3303      	adds	r3, #3
 800408a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800408c:	68fb      	ldr	r3, [r7, #12]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040a0:	f3ef 8305 	mrs	r3, IPSR
 80040a4:	607b      	str	r3, [r7, #4]
  return(result);
 80040a6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf14      	ite	ne
 80040ac:	2301      	movne	r3, #1
 80040ae:	2300      	moveq	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80040c2:	f001 f91f 	bl	8005304 <vTaskStartScheduler>
  
  return osOK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	bd80      	pop	{r7, pc}

080040cc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80040cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af04      	add	r7, sp, #16
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d020      	beq.n	8004120 <osThreadCreate+0x54>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01c      	beq.n	8004120 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685c      	ldr	r4, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691e      	ldr	r6, [r3, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ffb6 	bl	800406a <makeFreeRtosPriority>
 80040fe:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004108:	9202      	str	r2, [sp, #8]
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	9100      	str	r1, [sp, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	4632      	mov	r2, r6
 8004112:	4629      	mov	r1, r5
 8004114:	4620      	mov	r0, r4
 8004116:	f000 ff1f 	bl	8004f58 <xTaskCreateStatic>
 800411a:	4603      	mov	r3, r0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	e01c      	b.n	800415a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685c      	ldr	r4, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800412c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ff98 	bl	800406a <makeFreeRtosPriority>
 800413a:	4602      	mov	r2, r0
 800413c:	f107 030c 	add.w	r3, r7, #12
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	9200      	str	r2, [sp, #0]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4632      	mov	r2, r6
 8004148:	4629      	mov	r1, r5
 800414a:	4620      	mov	r0, r4
 800414c:	f000 ff60 	bl	8005010 <xTaskCreate>
 8004150:	4603      	mov	r3, r0
 8004152:	2b01      	cmp	r3, #1
 8004154:	d001      	beq.n	800415a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800415a:	68fb      	ldr	r3, [r7, #12]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004164 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <osDelay+0x16>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	e000      	b.n	800417c <osDelay+0x18>
 800417a:	2301      	movs	r3, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f001 f88d 	bl	800529c <vTaskDelay>
  
  return osOK;
 8004182:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af02      	add	r7, sp, #8
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00f      	beq.n	80041be <osSemaphoreCreate+0x32>
    if (count == 1) {
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d10a      	bne.n	80041ba <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2203      	movs	r2, #3
 80041aa:	9200      	str	r2, [sp, #0]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2100      	movs	r1, #0
 80041b0:	2001      	movs	r0, #1
 80041b2:	f000 f9bd 	bl	8004530 <xQueueGenericCreateStatic>
 80041b6:	4603      	mov	r3, r0
 80041b8:	e016      	b.n	80041e8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e014      	b.n	80041e8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d110      	bne.n	80041e6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80041c4:	2203      	movs	r2, #3
 80041c6:	2100      	movs	r1, #0
 80041c8:	2001      	movs	r0, #1
 80041ca:	f000 fa28 	bl	800461e <xQueueGenericCreate>
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <osSemaphoreCreate+0x56>
 80041d6:	2300      	movs	r3, #0
 80041d8:	2200      	movs	r2, #0
 80041da:	2100      	movs	r1, #0
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fa7b 	bl	80046d8 <xQueueGenericSend>
      return sema;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	e000      	b.n	80041e8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80041e6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	e03a      	b.n	800427e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d103      	bne.n	800421c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004214:	f04f 33ff 	mov.w	r3, #4294967295
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	e009      	b.n	8004230 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d006      	beq.n	8004230 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <osSemaphoreWait+0x40>
      ticks = 1;
 800422c:	2301      	movs	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004230:	f7ff ff33 	bl	800409a <inHandlerMode>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d017      	beq.n	800426a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800423a:	f107 0308 	add.w	r3, r7, #8
 800423e:	461a      	mov	r2, r3
 8004240:	2100      	movs	r1, #0
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fce0 	bl	8004c08 <xQueueReceiveFromISR>
 8004248:	4603      	mov	r3, r0
 800424a:	2b01      	cmp	r3, #1
 800424c:	d001      	beq.n	8004252 <osSemaphoreWait+0x62>
      return osErrorOS;
 800424e:	23ff      	movs	r3, #255	; 0xff
 8004250:	e015      	b.n	800427e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d011      	beq.n	800427c <osSemaphoreWait+0x8c>
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <osSemaphoreWait+0x98>)
 800425a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	e008      	b.n	800427c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800426a:	68f9      	ldr	r1, [r7, #12]
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fbbf 	bl	80049f0 <xQueueSemaphoreTake>
 8004272:	4603      	mov	r3, r0
 8004274:	2b01      	cmp	r3, #1
 8004276:	d001      	beq.n	800427c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004278:	23ff      	movs	r3, #255	; 0xff
 800427a:	e000      	b.n	800427e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004298:	2300      	movs	r3, #0
 800429a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800429c:	f7ff fefd 	bl	800409a <inHandlerMode>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d016      	beq.n	80042d4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80042a6:	f107 0308 	add.w	r3, r7, #8
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fb11 	bl	80048d4 <xQueueGiveFromISR>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d001      	beq.n	80042bc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80042b8:	23ff      	movs	r3, #255	; 0xff
 80042ba:	e017      	b.n	80042ec <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d013      	beq.n	80042ea <osSemaphoreRelease+0x5e>
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <osSemaphoreRelease+0x68>)
 80042c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	e00a      	b.n	80042ea <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80042d4:	2300      	movs	r3, #0
 80042d6:	2200      	movs	r2, #0
 80042d8:	2100      	movs	r1, #0
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f9fc 	bl	80046d8 <xQueueGenericSend>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d001      	beq.n	80042ea <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80042e6:	23ff      	movs	r3, #255	; 0xff
 80042e8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f103 0208 	add.w	r2, r3, #8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f04f 32ff 	mov.w	r2, #4294967295
 8004310:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f103 0208 	add.w	r2, r3, #8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f103 0208 	add.w	r2, r3, #8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	601a      	str	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d103      	bne.n	80043ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	e00c      	b.n	80043d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3308      	adds	r3, #8
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e002      	b.n	80043c8 <vListInsert+0x2e>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d2f6      	bcs.n	80043c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	601a      	str	r2, [r3, #0]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6892      	ldr	r2, [r2, #8]
 8004422:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6852      	ldr	r2, [r2, #4]
 800442c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	d103      	bne.n	8004440 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	1e5a      	subs	r2, r3, #1
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800448a:	f001 fecb 	bl	8006224 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004496:	68f9      	ldr	r1, [r7, #12]
 8004498:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	441a      	add	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	3b01      	subs	r3, #1
 80044bc:	68f9      	ldr	r1, [r7, #12]
 80044be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	441a      	add	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	22ff      	movs	r2, #255	; 0xff
 80044ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	22ff      	movs	r2, #255	; 0xff
 80044d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d114      	bne.n	800450a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01a      	beq.n	800451e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3310      	adds	r3, #16
 80044ec:	4618      	mov	r0, r3
 80044ee:	f001 f961 	bl	80057b4 <xTaskRemoveFromEventList>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d012      	beq.n	800451e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <xQueueGenericReset+0xcc>)
 80044fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	e009      	b.n	800451e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3310      	adds	r3, #16
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fef2 	bl	80042f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3324      	adds	r3, #36	; 0x24
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff feed 	bl	80042f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800451e:	f001 feb1 	bl	8006284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004522:	2301      	movs	r3, #1
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	e000ed04 	.word	0xe000ed04

08004530 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08e      	sub	sp, #56	; 0x38
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <xQueueGenericCreateStatic+0x52>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <xQueueGenericCreateStatic+0x56>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <xQueueGenericCreateStatic+0x58>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	623b      	str	r3, [r7, #32]
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <xQueueGenericCreateStatic+0x7e>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <xQueueGenericCreateStatic+0x82>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <xQueueGenericCreateStatic+0x84>
 80045b2:	2300      	movs	r3, #0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10a      	bne.n	80045ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	61fb      	str	r3, [r7, #28]
}
 80045ca:	bf00      	nop
 80045cc:	e7fe      	b.n	80045cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045ce:	2348      	movs	r3, #72	; 0x48
 80045d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b48      	cmp	r3, #72	; 0x48
 80045d6:	d00a      	beq.n	80045ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	61bb      	str	r3, [r7, #24]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00d      	beq.n	8004614 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004600:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	4613      	mov	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f843 	bl	800469a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004616:	4618      	mov	r0, r3
 8004618:	3730      	adds	r7, #48	; 0x30
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800461e:	b580      	push	{r7, lr}
 8004620:	b08a      	sub	sp, #40	; 0x28
 8004622:	af02      	add	r7, sp, #8
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	4613      	mov	r3, r2
 800462a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	613b      	str	r3, [r7, #16]
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	e004      	b.n	800465e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	fb02 f303 	mul.w	r3, r2, r3
 800465c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3348      	adds	r3, #72	; 0x48
 8004662:	4618      	mov	r0, r3
 8004664:	f001 ff00 	bl	8006468 <pvPortMalloc>
 8004668:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00f      	beq.n	8004690 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	3348      	adds	r3, #72	; 0x48
 8004674:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800467e:	79fa      	ldrb	r2, [r7, #7]
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f805 	bl	800469a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004690:	69bb      	ldr	r3, [r7, #24]
	}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
 80046a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d103      	bne.n	80046b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e002      	b.n	80046bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046c8:	2101      	movs	r1, #1
 80046ca:	69b8      	ldr	r0, [r7, #24]
 80046cc:	f7ff fec8 	bl	8004460 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08e      	sub	sp, #56	; 0x38
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046e6:	2300      	movs	r3, #0
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <xQueueGenericSend+0x32>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d103      	bne.n	8004718 <xQueueGenericSend+0x40>
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <xQueueGenericSend+0x44>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <xQueueGenericSend+0x46>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <xQueueGenericSend+0x60>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d103      	bne.n	8004746 <xQueueGenericSend+0x6e>
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <xQueueGenericSend+0x72>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <xQueueGenericSend+0x74>
 800474a:	2300      	movs	r3, #0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <xQueueGenericSend+0x8e>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	623b      	str	r3, [r7, #32]
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004766:	f001 f9eb 	bl	8005b40 <xTaskGetSchedulerState>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <xQueueGenericSend+0x9e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <xQueueGenericSend+0xa2>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <xQueueGenericSend+0xa4>
 800477a:	2300      	movs	r3, #0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <xQueueGenericSend+0xbe>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	61fb      	str	r3, [r7, #28]
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004796:	f001 fd45 	bl	8006224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d302      	bcc.n	80047ac <xQueueGenericSend+0xd4>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d129      	bne.n	8004800 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047b2:	f000 fac1 	bl	8004d38 <prvCopyDataToQueue>
 80047b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d010      	beq.n	80047e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	3324      	adds	r3, #36	; 0x24
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fff5 	bl	80057b4 <xTaskRemoveFromEventList>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d013      	beq.n	80047f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80047d0:	4b3f      	ldr	r3, [pc, #252]	; (80048d0 <xQueueGenericSend+0x1f8>)
 80047d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	e00a      	b.n	80047f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047e8:	4b39      	ldr	r3, [pc, #228]	; (80048d0 <xQueueGenericSend+0x1f8>)
 80047ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047f8:	f001 fd44 	bl	8006284 <vPortExitCritical>
				return pdPASS;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e063      	b.n	80048c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004806:	f001 fd3d 	bl	8006284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800480a:	2300      	movs	r3, #0
 800480c:	e05c      	b.n	80048c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800480e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004814:	f107 0314 	add.w	r3, r7, #20
 8004818:	4618      	mov	r0, r3
 800481a:	f001 f82d 	bl	8005878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800481e:	2301      	movs	r3, #1
 8004820:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004822:	f001 fd2f 	bl	8006284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004826:	f000 fdd7 	bl	80053d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800482a:	f001 fcfb 	bl	8006224 <vPortEnterCritical>
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004834:	b25b      	sxtb	r3, r3
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d103      	bne.n	8004844 <xQueueGenericSend+0x16c>
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800484a:	b25b      	sxtb	r3, r3
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004850:	d103      	bne.n	800485a <xQueueGenericSend+0x182>
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800485a:	f001 fd13 	bl	8006284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800485e:	1d3a      	adds	r2, r7, #4
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	4611      	mov	r1, r2
 8004866:	4618      	mov	r0, r3
 8004868:	f001 f81c 	bl	80058a4 <xTaskCheckForTimeOut>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d124      	bne.n	80048bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004874:	f000 fb58 	bl	8004f28 <prvIsQueueFull>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d018      	beq.n	80048b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	3310      	adds	r3, #16
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f000 ff70 	bl	800576c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800488c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800488e:	f000 fae3 	bl	8004e58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004892:	f000 fdaf 	bl	80053f4 <xTaskResumeAll>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	f47f af7c 	bne.w	8004796 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800489e:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <xQueueGenericSend+0x1f8>)
 80048a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	e772      	b.n	8004796 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b2:	f000 fad1 	bl	8004e58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048b6:	f000 fd9d 	bl	80053f4 <xTaskResumeAll>
 80048ba:	e76c      	b.n	8004796 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048be:	f000 facb 	bl	8004e58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048c2:	f000 fd97 	bl	80053f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048c6:	2300      	movs	r3, #0
		}
	}
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3738      	adds	r7, #56	; 0x38
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08e      	sub	sp, #56	; 0x38
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <xQueueGiveFromISR+0x2a>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	623b      	str	r3, [r7, #32]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <xQueueGiveFromISR+0x48>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	61fb      	str	r3, [r7, #28]
}
 8004918:	bf00      	nop
 800491a:	e7fe      	b.n	800491a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <xQueueGiveFromISR+0x58>
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <xQueueGiveFromISR+0x5c>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <xQueueGiveFromISR+0x5e>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <xQueueGiveFromISR+0x78>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	61bb      	str	r3, [r7, #24]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800494c:	f001 fd4c 	bl	80063e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004950:	f3ef 8211 	mrs	r2, BASEPRI
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	617a      	str	r2, [r7, #20]
 8004966:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004968:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004978:	429a      	cmp	r2, r3
 800497a:	d22b      	bcs.n	80049d4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800498e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d112      	bne.n	80049be <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	d016      	beq.n	80049ce <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	3324      	adds	r3, #36	; 0x24
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 ff05 	bl	80057b4 <xTaskRemoveFromEventList>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00e      	beq.n	80049ce <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2201      	movs	r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	e007      	b.n	80049ce <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049c2:	3301      	adds	r3, #1
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	b25a      	sxtb	r2, r3
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049ce:	2301      	movs	r3, #1
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
 80049d2:	e001      	b.n	80049d8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3738      	adds	r7, #56	; 0x38
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08e      	sub	sp, #56	; 0x38
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	623b      	str	r3, [r7, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	61fb      	str	r3, [r7, #28]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a40:	f001 f87e 	bl	8005b40 <xTaskGetSchedulerState>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <xQueueSemaphoreTake+0x60>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <xQueueSemaphoreTake+0x64>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <xQueueSemaphoreTake+0x66>
 8004a54:	2300      	movs	r3, #0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	61bb      	str	r3, [r7, #24]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a70:	f001 fbd8 	bl	8006224 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d024      	beq.n	8004aca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	1e5a      	subs	r2, r3, #1
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004a90:	f001 fa20 	bl	8005ed4 <pvTaskIncrementMutexHeldCount>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a98:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00f      	beq.n	8004ac2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	3310      	adds	r3, #16
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fe84 	bl	80057b4 <xTaskRemoveFromEventList>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ab2:	4b54      	ldr	r3, [pc, #336]	; (8004c04 <xQueueSemaphoreTake+0x214>)
 8004ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ac2:	f001 fbdf 	bl	8006284 <vPortExitCritical>
				return pdPASS;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e097      	b.n	8004bfa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d111      	bne.n	8004af4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	617b      	str	r3, [r7, #20]
}
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004aec:	f001 fbca 	bl	8006284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e082      	b.n	8004bfa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004afa:	f107 030c 	add.w	r3, r7, #12
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 feba 	bl	8005878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b08:	f001 fbbc 	bl	8006284 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b0c:	f000 fc64 	bl	80053d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b10:	f001 fb88 	bl	8006224 <vPortEnterCritical>
 8004b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b1a:	b25b      	sxtb	r3, r3
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d103      	bne.n	8004b2a <xQueueSemaphoreTake+0x13a>
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b30:	b25b      	sxtb	r3, r3
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d103      	bne.n	8004b40 <xQueueSemaphoreTake+0x150>
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b40:	f001 fba0 	bl	8006284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b44:	463a      	mov	r2, r7
 8004b46:	f107 030c 	add.w	r3, r7, #12
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fea9 	bl	80058a4 <xTaskCheckForTimeOut>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d132      	bne.n	8004bbe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b5a:	f000 f9cf 	bl	8004efc <prvIsQueueEmpty>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d026      	beq.n	8004bb2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d109      	bne.n	8004b80 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004b6c:	f001 fb5a 	bl	8006224 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f001 f801 	bl	8005b7c <xTaskPriorityInherit>
 8004b7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004b7c:	f001 fb82 	bl	8006284 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b82:	3324      	adds	r3, #36	; 0x24
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	4611      	mov	r1, r2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fdef 	bl	800576c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b90:	f000 f962 	bl	8004e58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b94:	f000 fc2e 	bl	80053f4 <xTaskResumeAll>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f47f af68 	bne.w	8004a70 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004ba0:	4b18      	ldr	r3, [pc, #96]	; (8004c04 <xQueueSemaphoreTake+0x214>)
 8004ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	e75e      	b.n	8004a70 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004bb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bb4:	f000 f950 	bl	8004e58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bb8:	f000 fc1c 	bl	80053f4 <xTaskResumeAll>
 8004bbc:	e758      	b.n	8004a70 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bc0:	f000 f94a 	bl	8004e58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bc4:	f000 fc16 	bl	80053f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bca:	f000 f997 	bl	8004efc <prvIsQueueEmpty>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f43f af4d 	beq.w	8004a70 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00d      	beq.n	8004bf8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004bdc:	f001 fb22 	bl	8006224 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004be2:	f000 f891 	bl	8004d08 <prvGetDisinheritPriorityAfterTimeout>
 8004be6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f001 f8d0 	bl	8005d94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004bf4:	f001 fb46 	bl	8006284 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3738      	adds	r7, #56	; 0x38
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	e000ed04 	.word	0xe000ed04

08004c08 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08e      	sub	sp, #56	; 0x38
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	623b      	str	r3, [r7, #32]
}
 8004c30:	bf00      	nop
 8004c32:	e7fe      	b.n	8004c32 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <xQueueReceiveFromISR+0x3a>
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <xQueueReceiveFromISR+0x3e>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <xQueueReceiveFromISR+0x40>
 8004c46:	2300      	movs	r3, #0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	61fb      	str	r3, [r7, #28]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c62:	f001 fbc1 	bl	80063e8 <vPortValidateInterruptPriority>
	__asm volatile
 8004c66:	f3ef 8211 	mrs	r2, BASEPRI
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	61ba      	str	r2, [r7, #24]
 8004c7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d02f      	beq.n	8004cee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c9c:	f000 f8b6 	bl	8004e0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	1e5a      	subs	r2, r3, #1
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ca8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d112      	bne.n	8004cd8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	3310      	adds	r3, #16
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fd78 	bl	80057b4 <xTaskRemoveFromEventList>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00e      	beq.n	8004ce8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00b      	beq.n	8004ce8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e007      	b.n	8004ce8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cdc:	3301      	adds	r3, #1
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	b25a      	sxtb	r2, r3
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34
 8004cec:	e001      	b.n	8004cf2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f383 8811 	msr	BASEPRI, r3
}
 8004cfc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3738      	adds	r7, #56	; 0x38
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f1c3 0307 	rsb	r3, r3, #7
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	e001      	b.n	8004d2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
	}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10d      	bne.n	8004d72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d14d      	bne.n	8004dfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 ff90 	bl	8005c88 <xTaskPriorityDisinherit>
 8004d68:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	605a      	str	r2, [r3, #4]
 8004d70:	e043      	b.n	8004dfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d119      	bne.n	8004dac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6898      	ldr	r0, [r3, #8]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	461a      	mov	r2, r3
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	f001 fdf4 	bl	8006970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	441a      	add	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d32b      	bcc.n	8004dfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	609a      	str	r2, [r3, #8]
 8004daa:	e026      	b.n	8004dfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	68d8      	ldr	r0, [r3, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	461a      	mov	r2, r3
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	f001 fdda 	bl	8006970 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	425b      	negs	r3, r3
 8004dc6:	441a      	add	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d207      	bcs.n	8004de8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	425b      	negs	r3, r3
 8004de2:	441a      	add	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d105      	bne.n	8004dfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e02:	697b      	ldr	r3, [r7, #20]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d018      	beq.n	8004e50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	441a      	add	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d303      	bcc.n	8004e40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68d9      	ldr	r1, [r3, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6838      	ldr	r0, [r7, #0]
 8004e4c:	f001 fd90 	bl	8006970 <memcpy>
	}
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e60:	f001 f9e0 	bl	8006224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e6c:	e011      	b.n	8004e92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d012      	beq.n	8004e9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3324      	adds	r3, #36	; 0x24
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fc9a 	bl	80057b4 <xTaskRemoveFromEventList>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e86:	f000 fd6f 	bl	8005968 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	dce9      	bgt.n	8004e6e <prvUnlockQueue+0x16>
 8004e9a:	e000      	b.n	8004e9e <prvUnlockQueue+0x46>
					break;
 8004e9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	22ff      	movs	r2, #255	; 0xff
 8004ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ea6:	f001 f9ed 	bl	8006284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004eaa:	f001 f9bb 	bl	8006224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eb6:	e011      	b.n	8004edc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d012      	beq.n	8004ee6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3310      	adds	r3, #16
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fc75 	bl	80057b4 <xTaskRemoveFromEventList>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ed0:	f000 fd4a 	bl	8005968 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ed4:	7bbb      	ldrb	r3, [r7, #14]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004edc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	dce9      	bgt.n	8004eb8 <prvUnlockQueue+0x60>
 8004ee4:	e000      	b.n	8004ee8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ee6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	22ff      	movs	r2, #255	; 0xff
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ef0:	f001 f9c8 	bl	8006284 <vPortExitCritical>
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f04:	f001 f98e 	bl	8006224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d102      	bne.n	8004f16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e001      	b.n	8004f1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f1a:	f001 f9b3 	bl	8006284 <vPortExitCritical>

	return xReturn;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f30:	f001 f978 	bl	8006224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d102      	bne.n	8004f46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e001      	b.n	8004f4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f4a:	f001 f99b 	bl	8006284 <vPortExitCritical>

	return xReturn;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08e      	sub	sp, #56	; 0x38
 8004f5c:	af04      	add	r7, sp, #16
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	623b      	str	r3, [r7, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <xTaskCreateStatic+0x46>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	61fb      	str	r3, [r7, #28]
}
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f9e:	23a0      	movs	r3, #160	; 0xa0
 8004fa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2ba0      	cmp	r3, #160	; 0xa0
 8004fa6:	d00a      	beq.n	8004fbe <xTaskCreateStatic+0x66>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	61bb      	str	r3, [r7, #24]
}
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01e      	beq.n	8005002 <xTaskCreateStatic+0xaa>
 8004fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01b      	beq.n	8005002 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fdc:	2300      	movs	r3, #0
 8004fde:	9303      	str	r3, [sp, #12]
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	9302      	str	r3, [sp, #8]
 8004fe4:	f107 0314 	add.w	r3, r7, #20
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f851 	bl	800509c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ffc:	f000 f8e4 	bl	80051c8 <prvAddNewTaskToReadyList>
 8005000:	e001      	b.n	8005006 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005006:	697b      	ldr	r3, [r7, #20]
	}
 8005008:	4618      	mov	r0, r3
 800500a:	3728      	adds	r7, #40	; 0x28
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08c      	sub	sp, #48	; 0x30
 8005014:	af04      	add	r7, sp, #16
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005020:	88fb      	ldrh	r3, [r7, #6]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4618      	mov	r0, r3
 8005026:	f001 fa1f 	bl	8006468 <pvPortMalloc>
 800502a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00e      	beq.n	8005050 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005032:	20a0      	movs	r0, #160	; 0xa0
 8005034:	f001 fa18 	bl	8006468 <pvPortMalloc>
 8005038:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	631a      	str	r2, [r3, #48]	; 0x30
 8005046:	e005      	b.n	8005054 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005048:	6978      	ldr	r0, [r7, #20]
 800504a:	f001 fad1 	bl	80065f0 <vPortFree>
 800504e:	e001      	b.n	8005054 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005050:	2300      	movs	r3, #0
 8005052:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d017      	beq.n	800508a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	2300      	movs	r3, #0
 8005066:	9303      	str	r3, [sp, #12]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	9302      	str	r3, [sp, #8]
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f80f 	bl	800509c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800507e:	69f8      	ldr	r0, [r7, #28]
 8005080:	f000 f8a2 	bl	80051c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005084:	2301      	movs	r3, #1
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	e002      	b.n	8005090 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800508a:	f04f 33ff 	mov.w	r3, #4294967295
 800508e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005090:	69bb      	ldr	r3, [r7, #24]
	}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050b4:	3b01      	subs	r3, #1
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	f023 0307 	bic.w	r3, r3, #7
 80050c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	617b      	str	r3, [r7, #20]
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050e4:	2300      	movs	r3, #0
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	e012      	b.n	8005110 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	7819      	ldrb	r1, [r3, #0]
 80050f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	3334      	adds	r3, #52	; 0x34
 80050fa:	460a      	mov	r2, r1
 80050fc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d006      	beq.n	8005118 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3301      	adds	r3, #1
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2b0f      	cmp	r3, #15
 8005114:	d9e9      	bls.n	80050ea <prvInitialiseNewTask+0x4e>
 8005116:	e000      	b.n	800511a <prvInitialiseNewTask+0x7e>
		{
			break;
 8005118:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	2b06      	cmp	r3, #6
 8005126:	d901      	bls.n	800512c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005128:	2306      	movs	r3, #6
 800512a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005130:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005136:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	2200      	movs	r2, #0
 800513c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	3304      	adds	r3, #4
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff f8f8 	bl	8004338 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	3318      	adds	r3, #24
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff f8f3 	bl	8004338 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005156:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	f1c3 0207 	rsb	r2, r3, #7
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005166:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	2200      	movs	r2, #0
 800516c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	2200      	movs	r2, #0
 8005174:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	334c      	adds	r3, #76	; 0x4c
 800517c:	224c      	movs	r2, #76	; 0x4c
 800517e:	2100      	movs	r1, #0
 8005180:	4618      	mov	r0, r3
 8005182:	f001 fb6b 	bl	800685c <memset>
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	4a0c      	ldr	r2, [pc, #48]	; (80051bc <prvInitialiseNewTask+0x120>)
 800518a:	651a      	str	r2, [r3, #80]	; 0x50
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	4a0c      	ldr	r2, [pc, #48]	; (80051c0 <prvInitialiseNewTask+0x124>)
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	4a0b      	ldr	r2, [pc, #44]	; (80051c4 <prvInitialiseNewTask+0x128>)
 8005196:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	69b8      	ldr	r0, [r7, #24]
 800519e:	f000 ff13 	bl	8005fc8 <pxPortInitialiseStack>
 80051a2:	4602      	mov	r2, r0
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051b4:	bf00      	nop
 80051b6:	3720      	adds	r7, #32
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	200014f8 	.word	0x200014f8
 80051c0:	20001560 	.word	0x20001560
 80051c4:	200015c8 	.word	0x200015c8

080051c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051d0:	f001 f828 	bl	8006224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051d4:	4b2a      	ldr	r3, [pc, #168]	; (8005280 <prvAddNewTaskToReadyList+0xb8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3301      	adds	r3, #1
 80051da:	4a29      	ldr	r2, [pc, #164]	; (8005280 <prvAddNewTaskToReadyList+0xb8>)
 80051dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051de:	4b29      	ldr	r3, [pc, #164]	; (8005284 <prvAddNewTaskToReadyList+0xbc>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051e6:	4a27      	ldr	r2, [pc, #156]	; (8005284 <prvAddNewTaskToReadyList+0xbc>)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051ec:	4b24      	ldr	r3, [pc, #144]	; (8005280 <prvAddNewTaskToReadyList+0xb8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d110      	bne.n	8005216 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051f4:	f000 fbdc 	bl	80059b0 <prvInitialiseTaskLists>
 80051f8:	e00d      	b.n	8005216 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051fa:	4b23      	ldr	r3, [pc, #140]	; (8005288 <prvAddNewTaskToReadyList+0xc0>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d109      	bne.n	8005216 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005202:	4b20      	ldr	r3, [pc, #128]	; (8005284 <prvAddNewTaskToReadyList+0xbc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	429a      	cmp	r2, r3
 800520e:	d802      	bhi.n	8005216 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005210:	4a1c      	ldr	r2, [pc, #112]	; (8005284 <prvAddNewTaskToReadyList+0xbc>)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005216:	4b1d      	ldr	r3, [pc, #116]	; (800528c <prvAddNewTaskToReadyList+0xc4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3301      	adds	r3, #1
 800521c:	4a1b      	ldr	r2, [pc, #108]	; (800528c <prvAddNewTaskToReadyList+0xc4>)
 800521e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	2201      	movs	r2, #1
 8005226:	409a      	lsls	r2, r3
 8005228:	4b19      	ldr	r3, [pc, #100]	; (8005290 <prvAddNewTaskToReadyList+0xc8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4313      	orrs	r3, r2
 800522e:	4a18      	ldr	r2, [pc, #96]	; (8005290 <prvAddNewTaskToReadyList+0xc8>)
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4a15      	ldr	r2, [pc, #84]	; (8005294 <prvAddNewTaskToReadyList+0xcc>)
 8005240:	441a      	add	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3304      	adds	r3, #4
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f7ff f882 	bl	8004352 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800524e:	f001 f819 	bl	8006284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005252:	4b0d      	ldr	r3, [pc, #52]	; (8005288 <prvAddNewTaskToReadyList+0xc0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00e      	beq.n	8005278 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800525a:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <prvAddNewTaskToReadyList+0xbc>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	429a      	cmp	r2, r3
 8005266:	d207      	bcs.n	8005278 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005268:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <prvAddNewTaskToReadyList+0xd0>)
 800526a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005278:	bf00      	nop
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	200008ac 	.word	0x200008ac
 8005284:	200007ac 	.word	0x200007ac
 8005288:	200008b8 	.word	0x200008b8
 800528c:	200008c8 	.word	0x200008c8
 8005290:	200008b4 	.word	0x200008b4
 8005294:	200007b0 	.word	0x200007b0
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d017      	beq.n	80052de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052ae:	4b13      	ldr	r3, [pc, #76]	; (80052fc <vTaskDelay+0x60>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <vTaskDelay+0x30>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	60bb      	str	r3, [r7, #8]
}
 80052c8:	bf00      	nop
 80052ca:	e7fe      	b.n	80052ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052cc:	f000 f884 	bl	80053d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052d0:	2100      	movs	r1, #0
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fe12 	bl	8005efc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052d8:	f000 f88c 	bl	80053f4 <xTaskResumeAll>
 80052dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d107      	bne.n	80052f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <vTaskDelay+0x64>)
 80052e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	200008d4 	.word	0x200008d4
 8005300:	e000ed04 	.word	0xe000ed04

08005304 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08a      	sub	sp, #40	; 0x28
 8005308:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005312:	463a      	mov	r2, r7
 8005314:	1d39      	adds	r1, r7, #4
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	4618      	mov	r0, r3
 800531c:	f7fa ffb0 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	9202      	str	r2, [sp, #8]
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	2300      	movs	r3, #0
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	2300      	movs	r3, #0
 8005330:	460a      	mov	r2, r1
 8005332:	4921      	ldr	r1, [pc, #132]	; (80053b8 <vTaskStartScheduler+0xb4>)
 8005334:	4821      	ldr	r0, [pc, #132]	; (80053bc <vTaskStartScheduler+0xb8>)
 8005336:	f7ff fe0f 	bl	8004f58 <xTaskCreateStatic>
 800533a:	4603      	mov	r3, r0
 800533c:	4a20      	ldr	r2, [pc, #128]	; (80053c0 <vTaskStartScheduler+0xbc>)
 800533e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005340:	4b1f      	ldr	r3, [pc, #124]	; (80053c0 <vTaskStartScheduler+0xbc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005348:	2301      	movs	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e001      	b.n	8005352 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d11b      	bne.n	8005390 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	613b      	str	r3, [r7, #16]
}
 800536a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800536c:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <vTaskStartScheduler+0xc0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	334c      	adds	r3, #76	; 0x4c
 8005372:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <vTaskStartScheduler+0xc4>)
 8005374:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005376:	4b15      	ldr	r3, [pc, #84]	; (80053cc <vTaskStartScheduler+0xc8>)
 8005378:	f04f 32ff 	mov.w	r2, #4294967295
 800537c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <vTaskStartScheduler+0xcc>)
 8005380:	2201      	movs	r2, #1
 8005382:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005384:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <vTaskStartScheduler+0xd0>)
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800538a:	f000 fea9 	bl	80060e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800538e:	e00e      	b.n	80053ae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005396:	d10a      	bne.n	80053ae <vTaskStartScheduler+0xaa>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	60fb      	str	r3, [r7, #12]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <vTaskStartScheduler+0xa8>
}
 80053ae:	bf00      	nop
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	08007408 	.word	0x08007408
 80053bc:	08005981 	.word	0x08005981
 80053c0:	200008d0 	.word	0x200008d0
 80053c4:	200007ac 	.word	0x200007ac
 80053c8:	2000005c 	.word	0x2000005c
 80053cc:	200008cc 	.word	0x200008cc
 80053d0:	200008b8 	.word	0x200008b8
 80053d4:	200008b0 	.word	0x200008b0

080053d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80053dc:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <vTaskSuspendAll+0x18>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3301      	adds	r3, #1
 80053e2:	4a03      	ldr	r2, [pc, #12]	; (80053f0 <vTaskSuspendAll+0x18>)
 80053e4:	6013      	str	r3, [r2, #0]
}
 80053e6:	bf00      	nop
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	200008d4 	.word	0x200008d4

080053f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005402:	4b41      	ldr	r3, [pc, #260]	; (8005508 <xTaskResumeAll+0x114>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <xTaskResumeAll+0x2c>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	603b      	str	r3, [r7, #0]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005420:	f000 ff00 	bl	8006224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005424:	4b38      	ldr	r3, [pc, #224]	; (8005508 <xTaskResumeAll+0x114>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3b01      	subs	r3, #1
 800542a:	4a37      	ldr	r2, [pc, #220]	; (8005508 <xTaskResumeAll+0x114>)
 800542c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800542e:	4b36      	ldr	r3, [pc, #216]	; (8005508 <xTaskResumeAll+0x114>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d161      	bne.n	80054fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005436:	4b35      	ldr	r3, [pc, #212]	; (800550c <xTaskResumeAll+0x118>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d05d      	beq.n	80054fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800543e:	e02e      	b.n	800549e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005440:	4b33      	ldr	r3, [pc, #204]	; (8005510 <xTaskResumeAll+0x11c>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3318      	adds	r3, #24
 800544c:	4618      	mov	r0, r3
 800544e:	f7fe ffdd 	bl	800440c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3304      	adds	r3, #4
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe ffd8 	bl	800440c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	2201      	movs	r2, #1
 8005462:	409a      	lsls	r2, r3
 8005464:	4b2b      	ldr	r3, [pc, #172]	; (8005514 <xTaskResumeAll+0x120>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4313      	orrs	r3, r2
 800546a:	4a2a      	ldr	r2, [pc, #168]	; (8005514 <xTaskResumeAll+0x120>)
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4a27      	ldr	r2, [pc, #156]	; (8005518 <xTaskResumeAll+0x124>)
 800547c:	441a      	add	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3304      	adds	r3, #4
 8005482:	4619      	mov	r1, r3
 8005484:	4610      	mov	r0, r2
 8005486:	f7fe ff64 	bl	8004352 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548e:	4b23      	ldr	r3, [pc, #140]	; (800551c <xTaskResumeAll+0x128>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	429a      	cmp	r2, r3
 8005496:	d302      	bcc.n	800549e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005498:	4b21      	ldr	r3, [pc, #132]	; (8005520 <xTaskResumeAll+0x12c>)
 800549a:	2201      	movs	r2, #1
 800549c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800549e:	4b1c      	ldr	r3, [pc, #112]	; (8005510 <xTaskResumeAll+0x11c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1cc      	bne.n	8005440 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054ac:	f000 fb22 	bl	8005af4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80054b0:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <xTaskResumeAll+0x130>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d010      	beq.n	80054de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054bc:	f000 f836 	bl	800552c <xTaskIncrementTick>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80054c6:	4b16      	ldr	r3, [pc, #88]	; (8005520 <xTaskResumeAll+0x12c>)
 80054c8:	2201      	movs	r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f1      	bne.n	80054bc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80054d8:	4b12      	ldr	r3, [pc, #72]	; (8005524 <xTaskResumeAll+0x130>)
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054de:	4b10      	ldr	r3, [pc, #64]	; (8005520 <xTaskResumeAll+0x12c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054e6:	2301      	movs	r3, #1
 80054e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054ea:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <xTaskResumeAll+0x134>)
 80054ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054fa:	f000 fec3 	bl	8006284 <vPortExitCritical>

	return xAlreadyYielded;
 80054fe:	68bb      	ldr	r3, [r7, #8]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	200008d4 	.word	0x200008d4
 800550c:	200008ac 	.word	0x200008ac
 8005510:	2000086c 	.word	0x2000086c
 8005514:	200008b4 	.word	0x200008b4
 8005518:	200007b0 	.word	0x200007b0
 800551c:	200007ac 	.word	0x200007ac
 8005520:	200008c0 	.word	0x200008c0
 8005524:	200008bc 	.word	0x200008bc
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005532:	2300      	movs	r3, #0
 8005534:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005536:	4b51      	ldr	r3, [pc, #324]	; (800567c <xTaskIncrementTick+0x150>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f040 808d 	bne.w	800565a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005540:	4b4f      	ldr	r3, [pc, #316]	; (8005680 <xTaskIncrementTick+0x154>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3301      	adds	r3, #1
 8005546:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005548:	4a4d      	ldr	r2, [pc, #308]	; (8005680 <xTaskIncrementTick+0x154>)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d120      	bne.n	8005596 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005554:	4b4b      	ldr	r3, [pc, #300]	; (8005684 <xTaskIncrementTick+0x158>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <xTaskIncrementTick+0x48>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	603b      	str	r3, [r7, #0]
}
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <xTaskIncrementTick+0x46>
 8005574:	4b43      	ldr	r3, [pc, #268]	; (8005684 <xTaskIncrementTick+0x158>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	4b43      	ldr	r3, [pc, #268]	; (8005688 <xTaskIncrementTick+0x15c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a41      	ldr	r2, [pc, #260]	; (8005684 <xTaskIncrementTick+0x158>)
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	4a41      	ldr	r2, [pc, #260]	; (8005688 <xTaskIncrementTick+0x15c>)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	4b40      	ldr	r3, [pc, #256]	; (800568c <xTaskIncrementTick+0x160>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3301      	adds	r3, #1
 800558e:	4a3f      	ldr	r2, [pc, #252]	; (800568c <xTaskIncrementTick+0x160>)
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	f000 faaf 	bl	8005af4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005596:	4b3e      	ldr	r3, [pc, #248]	; (8005690 <xTaskIncrementTick+0x164>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	429a      	cmp	r2, r3
 800559e:	d34d      	bcc.n	800563c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055a0:	4b38      	ldr	r3, [pc, #224]	; (8005684 <xTaskIncrementTick+0x158>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <xTaskIncrementTick+0x82>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <xTaskIncrementTick+0x84>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d004      	beq.n	80055be <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055b4:	4b36      	ldr	r3, [pc, #216]	; (8005690 <xTaskIncrementTick+0x164>)
 80055b6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ba:	601a      	str	r2, [r3, #0]
					break;
 80055bc:	e03e      	b.n	800563c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055be:	4b31      	ldr	r3, [pc, #196]	; (8005684 <xTaskIncrementTick+0x158>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d203      	bcs.n	80055de <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055d6:	4a2e      	ldr	r2, [pc, #184]	; (8005690 <xTaskIncrementTick+0x164>)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6013      	str	r3, [r2, #0]
						break;
 80055dc:	e02e      	b.n	800563c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	3304      	adds	r3, #4
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe ff12 	bl	800440c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d004      	beq.n	80055fa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	3318      	adds	r3, #24
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fe ff09 	bl	800440c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	2201      	movs	r2, #1
 8005600:	409a      	lsls	r2, r3
 8005602:	4b24      	ldr	r3, [pc, #144]	; (8005694 <xTaskIncrementTick+0x168>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4313      	orrs	r3, r2
 8005608:	4a22      	ldr	r2, [pc, #136]	; (8005694 <xTaskIncrementTick+0x168>)
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4a1f      	ldr	r2, [pc, #124]	; (8005698 <xTaskIncrementTick+0x16c>)
 800561a:	441a      	add	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	3304      	adds	r3, #4
 8005620:	4619      	mov	r1, r3
 8005622:	4610      	mov	r0, r2
 8005624:	f7fe fe95 	bl	8004352 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <xTaskIncrementTick+0x170>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	429a      	cmp	r2, r3
 8005634:	d3b4      	bcc.n	80055a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005636:	2301      	movs	r3, #1
 8005638:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800563a:	e7b1      	b.n	80055a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800563c:	4b17      	ldr	r3, [pc, #92]	; (800569c <xTaskIncrementTick+0x170>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005642:	4915      	ldr	r1, [pc, #84]	; (8005698 <xTaskIncrementTick+0x16c>)
 8005644:	4613      	mov	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d907      	bls.n	8005664 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	e004      	b.n	8005664 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800565a:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <xTaskIncrementTick+0x174>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3301      	adds	r3, #1
 8005660:	4a0f      	ldr	r2, [pc, #60]	; (80056a0 <xTaskIncrementTick+0x174>)
 8005662:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005664:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <xTaskIncrementTick+0x178>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800566c:	2301      	movs	r3, #1
 800566e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005670:	697b      	ldr	r3, [r7, #20]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	200008d4 	.word	0x200008d4
 8005680:	200008b0 	.word	0x200008b0
 8005684:	20000864 	.word	0x20000864
 8005688:	20000868 	.word	0x20000868
 800568c:	200008c4 	.word	0x200008c4
 8005690:	200008cc 	.word	0x200008cc
 8005694:	200008b4 	.word	0x200008b4
 8005698:	200007b0 	.word	0x200007b0
 800569c:	200007ac 	.word	0x200007ac
 80056a0:	200008bc 	.word	0x200008bc
 80056a4:	200008c0 	.word	0x200008c0

080056a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056ae:	4b29      	ldr	r3, [pc, #164]	; (8005754 <vTaskSwitchContext+0xac>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056b6:	4b28      	ldr	r3, [pc, #160]	; (8005758 <vTaskSwitchContext+0xb0>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056bc:	e044      	b.n	8005748 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80056be:	4b26      	ldr	r3, [pc, #152]	; (8005758 <vTaskSwitchContext+0xb0>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80056c4:	4b25      	ldr	r3, [pc, #148]	; (800575c <vTaskSwitchContext+0xb4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	fab3 f383 	clz	r3, r3
 80056d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056d2:	7afb      	ldrb	r3, [r7, #11]
 80056d4:	f1c3 031f 	rsb	r3, r3, #31
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	4921      	ldr	r1, [pc, #132]	; (8005760 <vTaskSwitchContext+0xb8>)
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4613      	mov	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <vTaskSwitchContext+0x5c>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	607b      	str	r3, [r7, #4]
}
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <vTaskSwitchContext+0x5a>
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4a14      	ldr	r2, [pc, #80]	; (8005760 <vTaskSwitchContext+0xb8>)
 8005710:	4413      	add	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	3308      	adds	r3, #8
 8005726:	429a      	cmp	r2, r3
 8005728:	d104      	bne.n	8005734 <vTaskSwitchContext+0x8c>
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	605a      	str	r2, [r3, #4]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <vTaskSwitchContext+0xbc>)
 800573c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <vTaskSwitchContext+0xbc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	334c      	adds	r3, #76	; 0x4c
 8005744:	4a08      	ldr	r2, [pc, #32]	; (8005768 <vTaskSwitchContext+0xc0>)
 8005746:	6013      	str	r3, [r2, #0]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	200008d4 	.word	0x200008d4
 8005758:	200008c0 	.word	0x200008c0
 800575c:	200008b4 	.word	0x200008b4
 8005760:	200007b0 	.word	0x200007b0
 8005764:	200007ac 	.word	0x200007ac
 8005768:	2000005c 	.word	0x2000005c

0800576c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	60fb      	str	r3, [r7, #12]
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005792:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <vTaskPlaceOnEventList+0x44>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3318      	adds	r3, #24
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fe fdfd 	bl	800439a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057a0:	2101      	movs	r1, #1
 80057a2:	6838      	ldr	r0, [r7, #0]
 80057a4:	f000 fbaa 	bl	8005efc <prvAddCurrentTaskToDelayedList>
}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	200007ac 	.word	0x200007ac

080057b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	60fb      	str	r3, [r7, #12]
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	3318      	adds	r3, #24
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fe11 	bl	800440c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ea:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <xTaskRemoveFromEventList+0xac>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11c      	bne.n	800582c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe fe08 	bl	800440c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	2201      	movs	r2, #1
 8005802:	409a      	lsls	r2, r3
 8005804:	4b17      	ldr	r3, [pc, #92]	; (8005864 <xTaskRemoveFromEventList+0xb0>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4313      	orrs	r3, r2
 800580a:	4a16      	ldr	r2, [pc, #88]	; (8005864 <xTaskRemoveFromEventList+0xb0>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4a13      	ldr	r2, [pc, #76]	; (8005868 <xTaskRemoveFromEventList+0xb4>)
 800581c:	441a      	add	r2, r3
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	3304      	adds	r3, #4
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f7fe fd94 	bl	8004352 <vListInsertEnd>
 800582a:	e005      	b.n	8005838 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	3318      	adds	r3, #24
 8005830:	4619      	mov	r1, r3
 8005832:	480e      	ldr	r0, [pc, #56]	; (800586c <xTaskRemoveFromEventList+0xb8>)
 8005834:	f7fe fd8d 	bl	8004352 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <xTaskRemoveFromEventList+0xbc>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	429a      	cmp	r2, r3
 8005844:	d905      	bls.n	8005852 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005846:	2301      	movs	r3, #1
 8005848:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <xTaskRemoveFromEventList+0xc0>)
 800584c:	2201      	movs	r2, #1
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	e001      	b.n	8005856 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005856:	697b      	ldr	r3, [r7, #20]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	200008d4 	.word	0x200008d4
 8005864:	200008b4 	.word	0x200008b4
 8005868:	200007b0 	.word	0x200007b0
 800586c:	2000086c 	.word	0x2000086c
 8005870:	200007ac 	.word	0x200007ac
 8005874:	200008c0 	.word	0x200008c0

08005878 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <vTaskInternalSetTimeOutState+0x24>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <vTaskInternalSetTimeOutState+0x28>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	605a      	str	r2, [r3, #4]
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	200008c4 	.word	0x200008c4
 80058a0:	200008b0 	.word	0x200008b0

080058a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	613b      	str	r3, [r7, #16]
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60fb      	str	r3, [r7, #12]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058e6:	f000 fc9d 	bl	8006224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058ea:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <xTaskCheckForTimeOut+0xbc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d102      	bne.n	800590a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005904:	2300      	movs	r3, #0
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	e023      	b.n	8005952 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b15      	ldr	r3, [pc, #84]	; (8005964 <xTaskCheckForTimeOut+0xc0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d007      	beq.n	8005926 <xTaskCheckForTimeOut+0x82>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	429a      	cmp	r2, r3
 800591e:	d302      	bcc.n	8005926 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e015      	b.n	8005952 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	429a      	cmp	r2, r3
 800592e:	d20b      	bcs.n	8005948 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff ff9b 	bl	8005878 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	e004      	b.n	8005952 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800594e:	2301      	movs	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005952:	f000 fc97 	bl	8006284 <vPortExitCritical>

	return xReturn;
 8005956:	69fb      	ldr	r3, [r7, #28]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	200008b0 	.word	0x200008b0
 8005964:	200008c4 	.word	0x200008c4

08005968 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800596c:	4b03      	ldr	r3, [pc, #12]	; (800597c <vTaskMissedYield+0x14>)
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
}
 8005972:	bf00      	nop
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	200008c0 	.word	0x200008c0

08005980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005988:	f000 f852 	bl	8005a30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <prvIdleTask+0x28>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d9f9      	bls.n	8005988 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <prvIdleTask+0x2c>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059a4:	e7f0      	b.n	8005988 <prvIdleTask+0x8>
 80059a6:	bf00      	nop
 80059a8:	200007b0 	.word	0x200007b0
 80059ac:	e000ed04 	.word	0xe000ed04

080059b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059b6:	2300      	movs	r3, #0
 80059b8:	607b      	str	r3, [r7, #4]
 80059ba:	e00c      	b.n	80059d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4a12      	ldr	r2, [pc, #72]	; (8005a10 <prvInitialiseTaskLists+0x60>)
 80059c8:	4413      	add	r3, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fc94 	bl	80042f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3301      	adds	r3, #1
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b06      	cmp	r3, #6
 80059da:	d9ef      	bls.n	80059bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059dc:	480d      	ldr	r0, [pc, #52]	; (8005a14 <prvInitialiseTaskLists+0x64>)
 80059de:	f7fe fc8b 	bl	80042f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059e2:	480d      	ldr	r0, [pc, #52]	; (8005a18 <prvInitialiseTaskLists+0x68>)
 80059e4:	f7fe fc88 	bl	80042f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059e8:	480c      	ldr	r0, [pc, #48]	; (8005a1c <prvInitialiseTaskLists+0x6c>)
 80059ea:	f7fe fc85 	bl	80042f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059ee:	480c      	ldr	r0, [pc, #48]	; (8005a20 <prvInitialiseTaskLists+0x70>)
 80059f0:	f7fe fc82 	bl	80042f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059f4:	480b      	ldr	r0, [pc, #44]	; (8005a24 <prvInitialiseTaskLists+0x74>)
 80059f6:	f7fe fc7f 	bl	80042f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <prvInitialiseTaskLists+0x78>)
 80059fc:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <prvInitialiseTaskLists+0x64>)
 80059fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <prvInitialiseTaskLists+0x7c>)
 8005a02:	4a05      	ldr	r2, [pc, #20]	; (8005a18 <prvInitialiseTaskLists+0x68>)
 8005a04:	601a      	str	r2, [r3, #0]
}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	200007b0 	.word	0x200007b0
 8005a14:	2000083c 	.word	0x2000083c
 8005a18:	20000850 	.word	0x20000850
 8005a1c:	2000086c 	.word	0x2000086c
 8005a20:	20000880 	.word	0x20000880
 8005a24:	20000898 	.word	0x20000898
 8005a28:	20000864 	.word	0x20000864
 8005a2c:	20000868 	.word	0x20000868

08005a30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a36:	e019      	b.n	8005a6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a38:	f000 fbf4 	bl	8006224 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a3c:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <prvCheckTasksWaitingTermination+0x50>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3304      	adds	r3, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fe fcdf 	bl	800440c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <prvCheckTasksWaitingTermination+0x54>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	4a0b      	ldr	r2, [pc, #44]	; (8005a84 <prvCheckTasksWaitingTermination+0x54>)
 8005a56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <prvCheckTasksWaitingTermination+0x58>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	4a0a      	ldr	r2, [pc, #40]	; (8005a88 <prvCheckTasksWaitingTermination+0x58>)
 8005a60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a62:	f000 fc0f 	bl	8006284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f810 	bl	8005a8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a6c:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <prvCheckTasksWaitingTermination+0x58>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e1      	bne.n	8005a38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000880 	.word	0x20000880
 8005a84:	200008ac 	.word	0x200008ac
 8005a88:	20000894 	.word	0x20000894

08005a8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	334c      	adds	r3, #76	; 0x4c
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fee7 	bl	800686c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d108      	bne.n	8005aba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fd9f 	bl	80065f0 <vPortFree>
				vPortFree( pxTCB );
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fd9c 	bl	80065f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ab8:	e018      	b.n	8005aec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d103      	bne.n	8005acc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fd93 	bl	80065f0 <vPortFree>
	}
 8005aca:	e00f      	b.n	8005aec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d00a      	beq.n	8005aec <prvDeleteTCB+0x60>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	60fb      	str	r3, [r7, #12]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <prvDeleteTCB+0x5e>
	}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005afa:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <prvResetNextTaskUnblockTime+0x44>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <prvResetNextTaskUnblockTime+0x14>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <prvResetNextTaskUnblockTime+0x16>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d004      	beq.n	8005b18 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b0e:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <prvResetNextTaskUnblockTime+0x48>)
 8005b10:	f04f 32ff 	mov.w	r2, #4294967295
 8005b14:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b16:	e008      	b.n	8005b2a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b18:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <prvResetNextTaskUnblockTime+0x44>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4a05      	ldr	r2, [pc, #20]	; (8005b3c <prvResetNextTaskUnblockTime+0x48>)
 8005b28:	6013      	str	r3, [r2, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	20000864 	.word	0x20000864
 8005b3c:	200008cc 	.word	0x200008cc

08005b40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <xTaskGetSchedulerState+0x34>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	e008      	b.n	8005b66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b54:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <xTaskGetSchedulerState+0x38>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d102      	bne.n	8005b62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	607b      	str	r3, [r7, #4]
 8005b60:	e001      	b.n	8005b66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b62:	2300      	movs	r3, #0
 8005b64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b66:	687b      	ldr	r3, [r7, #4]
	}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	200008b8 	.word	0x200008b8
 8005b78:	200008d4 	.word	0x200008d4

08005b7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d06e      	beq.n	8005c70 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b96:	4b39      	ldr	r3, [pc, #228]	; (8005c7c <xTaskPriorityInherit+0x100>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d25e      	bcs.n	8005c5e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	db06      	blt.n	8005bb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ba8:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <xTaskPriorityInherit+0x100>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	f1c3 0207 	rsb	r2, r3, #7
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6959      	ldr	r1, [r3, #20]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4a2e      	ldr	r2, [pc, #184]	; (8005c80 <xTaskPriorityInherit+0x104>)
 8005bc8:	4413      	add	r3, r2
 8005bca:	4299      	cmp	r1, r3
 8005bcc:	d101      	bne.n	8005bd2 <xTaskPriorityInherit+0x56>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <xTaskPriorityInherit+0x58>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d03a      	beq.n	8005c4e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fe fc15 	bl	800440c <uxListRemove>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d115      	bne.n	8005c14 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bec:	4924      	ldr	r1, [pc, #144]	; (8005c80 <xTaskPriorityInherit+0x104>)
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10a      	bne.n	8005c14 <xTaskPriorityInherit+0x98>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	2201      	movs	r2, #1
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	43da      	mvns	r2, r3
 8005c0a:	4b1e      	ldr	r3, [pc, #120]	; (8005c84 <xTaskPriorityInherit+0x108>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	4a1c      	ldr	r2, [pc, #112]	; (8005c84 <xTaskPriorityInherit+0x108>)
 8005c12:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c14:	4b19      	ldr	r3, [pc, #100]	; (8005c7c <xTaskPriorityInherit+0x100>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	2201      	movs	r2, #1
 8005c24:	409a      	lsls	r2, r3
 8005c26:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <xTaskPriorityInherit+0x108>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <xTaskPriorityInherit+0x108>)
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4a10      	ldr	r2, [pc, #64]	; (8005c80 <xTaskPriorityInherit+0x104>)
 8005c3e:	441a      	add	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f7fe fb83 	bl	8004352 <vListInsertEnd>
 8005c4c:	e004      	b.n	8005c58 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <xTaskPriorityInherit+0x100>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	e008      	b.n	8005c70 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <xTaskPriorityInherit+0x100>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d201      	bcs.n	8005c70 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c70:	68fb      	ldr	r3, [r7, #12]
	}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	200007ac 	.word	0x200007ac
 8005c80:	200007b0 	.word	0x200007b0
 8005c84:	200008b4 	.word	0x200008b4

08005c88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d06e      	beq.n	8005d7c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c9e:	4b3a      	ldr	r3, [pc, #232]	; (8005d88 <xTaskPriorityDisinherit+0x100>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d00a      	beq.n	8005cbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	60fb      	str	r3, [r7, #12]
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	60bb      	str	r3, [r7, #8]
}
 8005cd8:	bf00      	nop
 8005cda:	e7fe      	b.n	8005cda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce0:	1e5a      	subs	r2, r3, #1
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d044      	beq.n	8005d7c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d140      	bne.n	8005d7c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe fb84 	bl	800440c <uxListRemove>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d115      	bne.n	8005d36 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0e:	491f      	ldr	r1, [pc, #124]	; (8005d8c <xTaskPriorityDisinherit+0x104>)
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xTaskPriorityDisinherit+0xae>
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	2201      	movs	r2, #1
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43da      	mvns	r2, r3
 8005d2c:	4b18      	ldr	r3, [pc, #96]	; (8005d90 <xTaskPriorityDisinherit+0x108>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4013      	ands	r3, r2
 8005d32:	4a17      	ldr	r2, [pc, #92]	; (8005d90 <xTaskPriorityDisinherit+0x108>)
 8005d34:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	f1c3 0207 	rsb	r2, r3, #7
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	2201      	movs	r2, #1
 8005d50:	409a      	lsls	r2, r3
 8005d52:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <xTaskPriorityDisinherit+0x108>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	4a0d      	ldr	r2, [pc, #52]	; (8005d90 <xTaskPriorityDisinherit+0x108>)
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4a08      	ldr	r2, [pc, #32]	; (8005d8c <xTaskPriorityDisinherit+0x104>)
 8005d6a:	441a      	add	r2, r3
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f7fe faed 	bl	8004352 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d7c:	697b      	ldr	r3, [r7, #20]
	}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	200007ac 	.word	0x200007ac
 8005d8c:	200007b0 	.word	0x200007b0
 8005d90:	200008b4 	.word	0x200008b4

08005d94 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005da2:	2301      	movs	r3, #1
 8005da4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 8088 	beq.w	8005ebe <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10a      	bne.n	8005dcc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	60fb      	str	r3, [r7, #12]
}
 8005dc8:	bf00      	nop
 8005dca:	e7fe      	b.n	8005dca <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d902      	bls.n	8005ddc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	e002      	b.n	8005de2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d068      	beq.n	8005ebe <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d163      	bne.n	8005ebe <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005df6:	4b34      	ldr	r3, [pc, #208]	; (8005ec8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d10a      	bne.n	8005e16 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60bb      	str	r3, [r7, #8]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	db04      	blt.n	8005e34 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f1c3 0207 	rsb	r2, r3, #7
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	6959      	ldr	r1, [r3, #20]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e44:	4413      	add	r3, r2
 8005e46:	4299      	cmp	r1, r3
 8005e48:	d101      	bne.n	8005e4e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d034      	beq.n	8005ebe <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe fad7 	bl	800440c <uxListRemove>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d115      	bne.n	8005e90 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4918      	ldr	r1, [pc, #96]	; (8005ecc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	2201      	movs	r2, #1
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	43da      	mvns	r2, r3
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	4a10      	ldr	r2, [pc, #64]	; (8005ed0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005e8e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	2201      	movs	r2, #1
 8005e96:	409a      	lsls	r2, r3
 8005e98:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	4a0c      	ldr	r2, [pc, #48]	; (8005ed0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4a07      	ldr	r2, [pc, #28]	; (8005ecc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005eb0:	441a      	add	r2, r3
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4610      	mov	r0, r2
 8005eba:	f7fe fa4a 	bl	8004352 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ebe:	bf00      	nop
 8005ec0:	3720      	adds	r7, #32
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	200007ac 	.word	0x200007ac
 8005ecc:	200007b0 	.word	0x200007b0
 8005ed0:	200008b4 	.word	0x200008b4

08005ed4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ed8:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d004      	beq.n	8005eea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ee6:	3201      	adds	r2, #1
 8005ee8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005eea:	4b03      	ldr	r3, [pc, #12]	; (8005ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005eec:	681b      	ldr	r3, [r3, #0]
	}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	200007ac 	.word	0x200007ac

08005efc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f06:	4b29      	ldr	r3, [pc, #164]	; (8005fac <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f0c:	4b28      	ldr	r3, [pc, #160]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fe fa7a 	bl	800440c <uxListRemove>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10b      	bne.n	8005f36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005f1e:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	2201      	movs	r2, #1
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	43da      	mvns	r2, r3
 8005f2c:	4b21      	ldr	r3, [pc, #132]	; (8005fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4013      	ands	r3, r2
 8005f32:	4a20      	ldr	r2, [pc, #128]	; (8005fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d10a      	bne.n	8005f54 <prvAddCurrentTaskToDelayedList+0x58>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f44:	4b1a      	ldr	r3, [pc, #104]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	481a      	ldr	r0, [pc, #104]	; (8005fb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f4e:	f7fe fa00 	bl	8004352 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f52:	e026      	b.n	8005fa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4413      	add	r3, r2
 8005f5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f5c:	4b14      	ldr	r3, [pc, #80]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d209      	bcs.n	8005f80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f6c:	4b13      	ldr	r3, [pc, #76]	; (8005fbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f7fe fa0e 	bl	800439a <vListInsert>
}
 8005f7e:	e010      	b.n	8005fa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f80:	4b0f      	ldr	r3, [pc, #60]	; (8005fc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7fe fa04 	bl	800439a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f92:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d202      	bcs.n	8005fa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f9c:	4a09      	ldr	r2, [pc, #36]	; (8005fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6013      	str	r3, [r2, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	200008b0 	.word	0x200008b0
 8005fb0:	200007ac 	.word	0x200007ac
 8005fb4:	200008b4 	.word	0x200008b4
 8005fb8:	20000898 	.word	0x20000898
 8005fbc:	20000868 	.word	0x20000868
 8005fc0:	20000864 	.word	0x20000864
 8005fc4:	200008cc 	.word	0x200008cc

08005fc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3b04      	subs	r3, #4
 8005fd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f023 0201 	bic.w	r2, r3, #1
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ff8:	4a0c      	ldr	r2, [pc, #48]	; (800602c <pxPortInitialiseStack+0x64>)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3b14      	subs	r3, #20
 8006002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3b04      	subs	r3, #4
 800600e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f06f 0202 	mvn.w	r2, #2
 8006016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3b20      	subs	r3, #32
 800601c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	08006031 	.word	0x08006031

08006030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800603a:	4b12      	ldr	r3, [pc, #72]	; (8006084 <prvTaskExitError+0x54>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d00a      	beq.n	800605a <prvTaskExitError+0x2a>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	60fb      	str	r3, [r7, #12]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <prvTaskExitError+0x28>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	60bb      	str	r3, [r7, #8]
}
 800606c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800606e:	bf00      	nop
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0fc      	beq.n	8006070 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	2000000c 	.word	0x2000000c
	...

08006090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <pxCurrentTCBConst2>)
 8006092:	6819      	ldr	r1, [r3, #0]
 8006094:	6808      	ldr	r0, [r1, #0]
 8006096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609a:	f380 8809 	msr	PSP, r0
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8811 	msr	BASEPRI, r0
 80060aa:	4770      	bx	lr
 80060ac:	f3af 8000 	nop.w

080060b0 <pxCurrentTCBConst2>:
 80060b0:	200007ac 	.word	0x200007ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060b8:	4808      	ldr	r0, [pc, #32]	; (80060dc <prvPortStartFirstTask+0x24>)
 80060ba:	6800      	ldr	r0, [r0, #0]
 80060bc:	6800      	ldr	r0, [r0, #0]
 80060be:	f380 8808 	msr	MSP, r0
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f380 8814 	msr	CONTROL, r0
 80060ca:	b662      	cpsie	i
 80060cc:	b661      	cpsie	f
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	df00      	svc	0
 80060d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060da:	bf00      	nop
 80060dc:	e000ed08 	.word	0xe000ed08

080060e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060e6:	4b46      	ldr	r3, [pc, #280]	; (8006200 <xPortStartScheduler+0x120>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a46      	ldr	r2, [pc, #280]	; (8006204 <xPortStartScheduler+0x124>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d10a      	bne.n	8006106 <xPortStartScheduler+0x26>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	613b      	str	r3, [r7, #16]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006106:	4b3e      	ldr	r3, [pc, #248]	; (8006200 <xPortStartScheduler+0x120>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a3f      	ldr	r2, [pc, #252]	; (8006208 <xPortStartScheduler+0x128>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d10a      	bne.n	8006126 <xPortStartScheduler+0x46>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	60fb      	str	r3, [r7, #12]
}
 8006122:	bf00      	nop
 8006124:	e7fe      	b.n	8006124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006126:	4b39      	ldr	r3, [pc, #228]	; (800620c <xPortStartScheduler+0x12c>)
 8006128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	22ff      	movs	r2, #255	; 0xff
 8006136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006148:	b2da      	uxtb	r2, r3
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <xPortStartScheduler+0x130>)
 800614c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800614e:	4b31      	ldr	r3, [pc, #196]	; (8006214 <xPortStartScheduler+0x134>)
 8006150:	2207      	movs	r2, #7
 8006152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006154:	e009      	b.n	800616a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006156:	4b2f      	ldr	r3, [pc, #188]	; (8006214 <xPortStartScheduler+0x134>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3b01      	subs	r3, #1
 800615c:	4a2d      	ldr	r2, [pc, #180]	; (8006214 <xPortStartScheduler+0x134>)
 800615e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	b2db      	uxtb	r3, r3
 8006168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d0ef      	beq.n	8006156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006176:	4b27      	ldr	r3, [pc, #156]	; (8006214 <xPortStartScheduler+0x134>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1c3 0307 	rsb	r3, r3, #7
 800617e:	2b04      	cmp	r3, #4
 8006180:	d00a      	beq.n	8006198 <xPortStartScheduler+0xb8>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	60bb      	str	r3, [r7, #8]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006198:	4b1e      	ldr	r3, [pc, #120]	; (8006214 <xPortStartScheduler+0x134>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	4a1d      	ldr	r2, [pc, #116]	; (8006214 <xPortStartScheduler+0x134>)
 80061a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061a2:	4b1c      	ldr	r3, [pc, #112]	; (8006214 <xPortStartScheduler+0x134>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061aa:	4a1a      	ldr	r2, [pc, #104]	; (8006214 <xPortStartScheduler+0x134>)
 80061ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061b6:	4b18      	ldr	r3, [pc, #96]	; (8006218 <xPortStartScheduler+0x138>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a17      	ldr	r2, [pc, #92]	; (8006218 <xPortStartScheduler+0x138>)
 80061bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061c2:	4b15      	ldr	r3, [pc, #84]	; (8006218 <xPortStartScheduler+0x138>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a14      	ldr	r2, [pc, #80]	; (8006218 <xPortStartScheduler+0x138>)
 80061c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061ce:	f000 f8dd 	bl	800638c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061d2:	4b12      	ldr	r3, [pc, #72]	; (800621c <xPortStartScheduler+0x13c>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061d8:	f000 f8fc 	bl	80063d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061dc:	4b10      	ldr	r3, [pc, #64]	; (8006220 <xPortStartScheduler+0x140>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a0f      	ldr	r2, [pc, #60]	; (8006220 <xPortStartScheduler+0x140>)
 80061e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061e8:	f7ff ff66 	bl	80060b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061ec:	f7ff fa5c 	bl	80056a8 <vTaskSwitchContext>
	prvTaskExitError();
 80061f0:	f7ff ff1e 	bl	8006030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	e000ed00 	.word	0xe000ed00
 8006204:	410fc271 	.word	0x410fc271
 8006208:	410fc270 	.word	0x410fc270
 800620c:	e000e400 	.word	0xe000e400
 8006210:	200008d8 	.word	0x200008d8
 8006214:	200008dc 	.word	0x200008dc
 8006218:	e000ed20 	.word	0xe000ed20
 800621c:	2000000c 	.word	0x2000000c
 8006220:	e000ef34 	.word	0xe000ef34

08006224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	607b      	str	r3, [r7, #4]
}
 800623c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800623e:	4b0f      	ldr	r3, [pc, #60]	; (800627c <vPortEnterCritical+0x58>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3301      	adds	r3, #1
 8006244:	4a0d      	ldr	r2, [pc, #52]	; (800627c <vPortEnterCritical+0x58>)
 8006246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006248:	4b0c      	ldr	r3, [pc, #48]	; (800627c <vPortEnterCritical+0x58>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10f      	bne.n	8006270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <vPortEnterCritical+0x5c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <vPortEnterCritical+0x4c>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	603b      	str	r3, [r7, #0]
}
 800626c:	bf00      	nop
 800626e:	e7fe      	b.n	800626e <vPortEnterCritical+0x4a>
	}
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	2000000c 	.word	0x2000000c
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800628a:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <vPortExitCritical+0x50>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <vPortExitCritical+0x24>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	607b      	str	r3, [r7, #4]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <vPortExitCritical+0x50>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	4a09      	ldr	r2, [pc, #36]	; (80062d4 <vPortExitCritical+0x50>)
 80062b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062b2:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <vPortExitCritical+0x50>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d105      	bne.n	80062c6 <vPortExitCritical+0x42>
 80062ba:	2300      	movs	r3, #0
 80062bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	f383 8811 	msr	BASEPRI, r3
}
 80062c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	2000000c 	.word	0x2000000c
	...

080062e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062e0:	f3ef 8009 	mrs	r0, PSP
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4b15      	ldr	r3, [pc, #84]	; (8006340 <pxCurrentTCBConst>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	f01e 0f10 	tst.w	lr, #16
 80062f0:	bf08      	it	eq
 80062f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fa:	6010      	str	r0, [r2, #0]
 80062fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006304:	f380 8811 	msr	BASEPRI, r0
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f7ff f9ca 	bl	80056a8 <vTaskSwitchContext>
 8006314:	f04f 0000 	mov.w	r0, #0
 8006318:	f380 8811 	msr	BASEPRI, r0
 800631c:	bc09      	pop	{r0, r3}
 800631e:	6819      	ldr	r1, [r3, #0]
 8006320:	6808      	ldr	r0, [r1, #0]
 8006322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006326:	f01e 0f10 	tst.w	lr, #16
 800632a:	bf08      	it	eq
 800632c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006330:	f380 8809 	msr	PSP, r0
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	f3af 8000 	nop.w

08006340 <pxCurrentTCBConst>:
 8006340:	200007ac 	.word	0x200007ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop

08006348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	607b      	str	r3, [r7, #4]
}
 8006360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006362:	f7ff f8e3 	bl	800552c <xTaskIncrementTick>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800636c:	4b06      	ldr	r3, [pc, #24]	; (8006388 <SysTick_Handler+0x40>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006390:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <vPortSetupTimerInterrupt+0x34>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006396:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <vPortSetupTimerInterrupt+0x38>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <vPortSetupTimerInterrupt+0x3c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <vPortSetupTimerInterrupt+0x40>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <vPortSetupTimerInterrupt+0x44>)
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ae:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <vPortSetupTimerInterrupt+0x34>)
 80063b0:	2207      	movs	r2, #7
 80063b2:	601a      	str	r2, [r3, #0]
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	e000e010 	.word	0xe000e010
 80063c4:	e000e018 	.word	0xe000e018
 80063c8:	20000000 	.word	0x20000000
 80063cc:	10624dd3 	.word	0x10624dd3
 80063d0:	e000e014 	.word	0xe000e014

080063d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063e4 <vPortEnableVFP+0x10>
 80063d8:	6801      	ldr	r1, [r0, #0]
 80063da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063de:	6001      	str	r1, [r0, #0]
 80063e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063e2:	bf00      	nop
 80063e4:	e000ed88 	.word	0xe000ed88

080063e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063ee:	f3ef 8305 	mrs	r3, IPSR
 80063f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d914      	bls.n	8006424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063fa:	4a17      	ldr	r2, [pc, #92]	; (8006458 <vPortValidateInterruptPriority+0x70>)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006404:	4b15      	ldr	r3, [pc, #84]	; (800645c <vPortValidateInterruptPriority+0x74>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	7afa      	ldrb	r2, [r7, #11]
 800640a:	429a      	cmp	r2, r3
 800640c:	d20a      	bcs.n	8006424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	607b      	str	r3, [r7, #4]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006424:	4b0e      	ldr	r3, [pc, #56]	; (8006460 <vPortValidateInterruptPriority+0x78>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800642c:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <vPortValidateInterruptPriority+0x7c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d90a      	bls.n	800644a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	603b      	str	r3, [r7, #0]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <vPortValidateInterruptPriority+0x60>
	}
 800644a:	bf00      	nop
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	e000e3f0 	.word	0xe000e3f0
 800645c:	200008d8 	.word	0x200008d8
 8006460:	e000ed0c 	.word	0xe000ed0c
 8006464:	200008dc 	.word	0x200008dc

08006468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08a      	sub	sp, #40	; 0x28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006470:	2300      	movs	r3, #0
 8006472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006474:	f7fe ffb0 	bl	80053d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006478:	4b58      	ldr	r3, [pc, #352]	; (80065dc <pvPortMalloc+0x174>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006480:	f000 f910 	bl	80066a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006484:	4b56      	ldr	r3, [pc, #344]	; (80065e0 <pvPortMalloc+0x178>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	f040 808e 	bne.w	80065ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01d      	beq.n	80064d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006498:	2208      	movs	r2, #8
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4413      	add	r3, r2
 800649e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d014      	beq.n	80064d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f023 0307 	bic.w	r3, r3, #7
 80064b0:	3308      	adds	r3, #8
 80064b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <pvPortMalloc+0x6c>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	617b      	str	r3, [r7, #20]
}
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d069      	beq.n	80065ae <pvPortMalloc+0x146>
 80064da:	4b42      	ldr	r3, [pc, #264]	; (80065e4 <pvPortMalloc+0x17c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d864      	bhi.n	80065ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064e4:	4b40      	ldr	r3, [pc, #256]	; (80065e8 <pvPortMalloc+0x180>)
 80064e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064e8:	4b3f      	ldr	r3, [pc, #252]	; (80065e8 <pvPortMalloc+0x180>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ee:	e004      	b.n	80064fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	429a      	cmp	r2, r3
 8006502:	d903      	bls.n	800650c <pvPortMalloc+0xa4>
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1f1      	bne.n	80064f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800650c:	4b33      	ldr	r3, [pc, #204]	; (80065dc <pvPortMalloc+0x174>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006512:	429a      	cmp	r2, r3
 8006514:	d04b      	beq.n	80065ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2208      	movs	r2, #8
 800651c:	4413      	add	r3, r2
 800651e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	1ad2      	subs	r2, r2, r3
 8006530:	2308      	movs	r3, #8
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	429a      	cmp	r2, r3
 8006536:	d91f      	bls.n	8006578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <pvPortMalloc+0xf8>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	613b      	str	r3, [r7, #16]
}
 800655c:	bf00      	nop
 800655e:	e7fe      	b.n	800655e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	1ad2      	subs	r2, r2, r3
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006572:	69b8      	ldr	r0, [r7, #24]
 8006574:	f000 f8f8 	bl	8006768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006578:	4b1a      	ldr	r3, [pc, #104]	; (80065e4 <pvPortMalloc+0x17c>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	4a18      	ldr	r2, [pc, #96]	; (80065e4 <pvPortMalloc+0x17c>)
 8006584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006586:	4b17      	ldr	r3, [pc, #92]	; (80065e4 <pvPortMalloc+0x17c>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	4b18      	ldr	r3, [pc, #96]	; (80065ec <pvPortMalloc+0x184>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d203      	bcs.n	800659a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006592:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <pvPortMalloc+0x17c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a15      	ldr	r2, [pc, #84]	; (80065ec <pvPortMalloc+0x184>)
 8006598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <pvPortMalloc+0x178>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065ae:	f7fe ff21 	bl	80053f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <pvPortMalloc+0x16a>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	60fb      	str	r3, [r7, #12]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <pvPortMalloc+0x168>
	return pvReturn;
 80065d2:	69fb      	ldr	r3, [r7, #28]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3728      	adds	r7, #40	; 0x28
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	200014e8 	.word	0x200014e8
 80065e0:	200014f4 	.word	0x200014f4
 80065e4:	200014ec 	.word	0x200014ec
 80065e8:	200014e0 	.word	0x200014e0
 80065ec:	200014f0 	.word	0x200014f0

080065f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d048      	beq.n	8006694 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006602:	2308      	movs	r3, #8
 8006604:	425b      	negs	r3, r3
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4413      	add	r3, r2
 800660a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	4b21      	ldr	r3, [pc, #132]	; (800669c <vPortFree+0xac>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4013      	ands	r3, r2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <vPortFree+0x44>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	60fb      	str	r3, [r7, #12]
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <vPortFree+0x62>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60bb      	str	r3, [r7, #8]
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	4b11      	ldr	r3, [pc, #68]	; (800669c <vPortFree+0xac>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4013      	ands	r3, r2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d019      	beq.n	8006694 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d115      	bne.n	8006694 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	4b0b      	ldr	r3, [pc, #44]	; (800669c <vPortFree+0xac>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	43db      	mvns	r3, r3
 8006672:	401a      	ands	r2, r3
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006678:	f7fe feae 	bl	80053d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <vPortFree+0xb0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4413      	add	r3, r2
 8006686:	4a06      	ldr	r2, [pc, #24]	; (80066a0 <vPortFree+0xb0>)
 8006688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800668a:	6938      	ldr	r0, [r7, #16]
 800668c:	f000 f86c 	bl	8006768 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006690:	f7fe feb0 	bl	80053f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006694:	bf00      	nop
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	200014f4 	.word	0x200014f4
 80066a0:	200014ec 	.word	0x200014ec

080066a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80066ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066b0:	4b27      	ldr	r3, [pc, #156]	; (8006750 <prvHeapInit+0xac>)
 80066b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00c      	beq.n	80066d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3307      	adds	r3, #7
 80066c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0307 	bic.w	r3, r3, #7
 80066ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <prvHeapInit+0xac>)
 80066d4:	4413      	add	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066dc:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <prvHeapInit+0xb0>)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <prvHeapInit+0xb0>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4413      	add	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066f0:	2208      	movs	r2, #8
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0307 	bic.w	r3, r3, #7
 80066fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a15      	ldr	r2, [pc, #84]	; (8006758 <prvHeapInit+0xb4>)
 8006704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <prvHeapInit+0xb4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <prvHeapInit+0xb4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006724:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <prvHeapInit+0xb4>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <prvHeapInit+0xb8>)
 8006732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <prvHeapInit+0xbc>)
 800673a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <prvHeapInit+0xc0>)
 800673e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	200008e0 	.word	0x200008e0
 8006754:	200014e0 	.word	0x200014e0
 8006758:	200014e8 	.word	0x200014e8
 800675c:	200014f0 	.word	0x200014f0
 8006760:	200014ec 	.word	0x200014ec
 8006764:	200014f4 	.word	0x200014f4

08006768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006770:	4b28      	ldr	r3, [pc, #160]	; (8006814 <prvInsertBlockIntoFreeList+0xac>)
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e002      	b.n	800677c <prvInsertBlockIntoFreeList+0x14>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d8f7      	bhi.n	8006776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4413      	add	r3, r2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d108      	bne.n	80067aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	441a      	add	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	441a      	add	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d118      	bne.n	80067f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d00d      	beq.n	80067e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	441a      	add	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	e008      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e003      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d002      	beq.n	8006806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	200014e0 	.word	0x200014e0
 8006818:	200014e8 	.word	0x200014e8

0800681c <siprintf>:
 800681c:	b40e      	push	{r1, r2, r3}
 800681e:	b500      	push	{lr}
 8006820:	b09c      	sub	sp, #112	; 0x70
 8006822:	ab1d      	add	r3, sp, #116	; 0x74
 8006824:	9002      	str	r0, [sp, #8]
 8006826:	9006      	str	r0, [sp, #24]
 8006828:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800682c:	4809      	ldr	r0, [pc, #36]	; (8006854 <siprintf+0x38>)
 800682e:	9107      	str	r1, [sp, #28]
 8006830:	9104      	str	r1, [sp, #16]
 8006832:	4909      	ldr	r1, [pc, #36]	; (8006858 <siprintf+0x3c>)
 8006834:	f853 2b04 	ldr.w	r2, [r3], #4
 8006838:	9105      	str	r1, [sp, #20]
 800683a:	6800      	ldr	r0, [r0, #0]
 800683c:	9301      	str	r3, [sp, #4]
 800683e:	a902      	add	r1, sp, #8
 8006840:	f000 f9f6 	bl	8006c30 <_svfiprintf_r>
 8006844:	9b02      	ldr	r3, [sp, #8]
 8006846:	2200      	movs	r2, #0
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	b01c      	add	sp, #112	; 0x70
 800684c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006850:	b003      	add	sp, #12
 8006852:	4770      	bx	lr
 8006854:	2000005c 	.word	0x2000005c
 8006858:	ffff0208 	.word	0xffff0208

0800685c <memset>:
 800685c:	4402      	add	r2, r0
 800685e:	4603      	mov	r3, r0
 8006860:	4293      	cmp	r3, r2
 8006862:	d100      	bne.n	8006866 <memset+0xa>
 8006864:	4770      	bx	lr
 8006866:	f803 1b01 	strb.w	r1, [r3], #1
 800686a:	e7f9      	b.n	8006860 <memset+0x4>

0800686c <_reclaim_reent>:
 800686c:	4b29      	ldr	r3, [pc, #164]	; (8006914 <_reclaim_reent+0xa8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4283      	cmp	r3, r0
 8006872:	b570      	push	{r4, r5, r6, lr}
 8006874:	4604      	mov	r4, r0
 8006876:	d04b      	beq.n	8006910 <_reclaim_reent+0xa4>
 8006878:	69c3      	ldr	r3, [r0, #28]
 800687a:	b143      	cbz	r3, 800688e <_reclaim_reent+0x22>
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d144      	bne.n	800690c <_reclaim_reent+0xa0>
 8006882:	69e3      	ldr	r3, [r4, #28]
 8006884:	6819      	ldr	r1, [r3, #0]
 8006886:	b111      	cbz	r1, 800688e <_reclaim_reent+0x22>
 8006888:	4620      	mov	r0, r4
 800688a:	f000 f87f 	bl	800698c <_free_r>
 800688e:	6961      	ldr	r1, [r4, #20]
 8006890:	b111      	cbz	r1, 8006898 <_reclaim_reent+0x2c>
 8006892:	4620      	mov	r0, r4
 8006894:	f000 f87a 	bl	800698c <_free_r>
 8006898:	69e1      	ldr	r1, [r4, #28]
 800689a:	b111      	cbz	r1, 80068a2 <_reclaim_reent+0x36>
 800689c:	4620      	mov	r0, r4
 800689e:	f000 f875 	bl	800698c <_free_r>
 80068a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80068a4:	b111      	cbz	r1, 80068ac <_reclaim_reent+0x40>
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 f870 	bl	800698c <_free_r>
 80068ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ae:	b111      	cbz	r1, 80068b6 <_reclaim_reent+0x4a>
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 f86b 	bl	800698c <_free_r>
 80068b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80068b8:	b111      	cbz	r1, 80068c0 <_reclaim_reent+0x54>
 80068ba:	4620      	mov	r0, r4
 80068bc:	f000 f866 	bl	800698c <_free_r>
 80068c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80068c2:	b111      	cbz	r1, 80068ca <_reclaim_reent+0x5e>
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 f861 	bl	800698c <_free_r>
 80068ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80068cc:	b111      	cbz	r1, 80068d4 <_reclaim_reent+0x68>
 80068ce:	4620      	mov	r0, r4
 80068d0:	f000 f85c 	bl	800698c <_free_r>
 80068d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80068d6:	b111      	cbz	r1, 80068de <_reclaim_reent+0x72>
 80068d8:	4620      	mov	r0, r4
 80068da:	f000 f857 	bl	800698c <_free_r>
 80068de:	6a23      	ldr	r3, [r4, #32]
 80068e0:	b1b3      	cbz	r3, 8006910 <_reclaim_reent+0xa4>
 80068e2:	4620      	mov	r0, r4
 80068e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068e8:	4718      	bx	r3
 80068ea:	5949      	ldr	r1, [r1, r5]
 80068ec:	b941      	cbnz	r1, 8006900 <_reclaim_reent+0x94>
 80068ee:	3504      	adds	r5, #4
 80068f0:	69e3      	ldr	r3, [r4, #28]
 80068f2:	2d80      	cmp	r5, #128	; 0x80
 80068f4:	68d9      	ldr	r1, [r3, #12]
 80068f6:	d1f8      	bne.n	80068ea <_reclaim_reent+0x7e>
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 f847 	bl	800698c <_free_r>
 80068fe:	e7c0      	b.n	8006882 <_reclaim_reent+0x16>
 8006900:	680e      	ldr	r6, [r1, #0]
 8006902:	4620      	mov	r0, r4
 8006904:	f000 f842 	bl	800698c <_free_r>
 8006908:	4631      	mov	r1, r6
 800690a:	e7ef      	b.n	80068ec <_reclaim_reent+0x80>
 800690c:	2500      	movs	r5, #0
 800690e:	e7ef      	b.n	80068f0 <_reclaim_reent+0x84>
 8006910:	bd70      	pop	{r4, r5, r6, pc}
 8006912:	bf00      	nop
 8006914:	2000005c 	.word	0x2000005c

08006918 <__errno>:
 8006918:	4b01      	ldr	r3, [pc, #4]	; (8006920 <__errno+0x8>)
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	2000005c 	.word	0x2000005c

08006924 <__libc_init_array>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	4d0d      	ldr	r5, [pc, #52]	; (800695c <__libc_init_array+0x38>)
 8006928:	4c0d      	ldr	r4, [pc, #52]	; (8006960 <__libc_init_array+0x3c>)
 800692a:	1b64      	subs	r4, r4, r5
 800692c:	10a4      	asrs	r4, r4, #2
 800692e:	2600      	movs	r6, #0
 8006930:	42a6      	cmp	r6, r4
 8006932:	d109      	bne.n	8006948 <__libc_init_array+0x24>
 8006934:	4d0b      	ldr	r5, [pc, #44]	; (8006964 <__libc_init_array+0x40>)
 8006936:	4c0c      	ldr	r4, [pc, #48]	; (8006968 <__libc_init_array+0x44>)
 8006938:	f000 fc6a 	bl	8007210 <_init>
 800693c:	1b64      	subs	r4, r4, r5
 800693e:	10a4      	asrs	r4, r4, #2
 8006940:	2600      	movs	r6, #0
 8006942:	42a6      	cmp	r6, r4
 8006944:	d105      	bne.n	8006952 <__libc_init_array+0x2e>
 8006946:	bd70      	pop	{r4, r5, r6, pc}
 8006948:	f855 3b04 	ldr.w	r3, [r5], #4
 800694c:	4798      	blx	r3
 800694e:	3601      	adds	r6, #1
 8006950:	e7ee      	b.n	8006930 <__libc_init_array+0xc>
 8006952:	f855 3b04 	ldr.w	r3, [r5], #4
 8006956:	4798      	blx	r3
 8006958:	3601      	adds	r6, #1
 800695a:	e7f2      	b.n	8006942 <__libc_init_array+0x1e>
 800695c:	0800747c 	.word	0x0800747c
 8006960:	0800747c 	.word	0x0800747c
 8006964:	0800747c 	.word	0x0800747c
 8006968:	08007480 	.word	0x08007480

0800696c <__retarget_lock_acquire_recursive>:
 800696c:	4770      	bx	lr

0800696e <__retarget_lock_release_recursive>:
 800696e:	4770      	bx	lr

08006970 <memcpy>:
 8006970:	440a      	add	r2, r1
 8006972:	4291      	cmp	r1, r2
 8006974:	f100 33ff 	add.w	r3, r0, #4294967295
 8006978:	d100      	bne.n	800697c <memcpy+0xc>
 800697a:	4770      	bx	lr
 800697c:	b510      	push	{r4, lr}
 800697e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006986:	4291      	cmp	r1, r2
 8006988:	d1f9      	bne.n	800697e <memcpy+0xe>
 800698a:	bd10      	pop	{r4, pc}

0800698c <_free_r>:
 800698c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800698e:	2900      	cmp	r1, #0
 8006990:	d044      	beq.n	8006a1c <_free_r+0x90>
 8006992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006996:	9001      	str	r0, [sp, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f1a1 0404 	sub.w	r4, r1, #4
 800699e:	bfb8      	it	lt
 80069a0:	18e4      	addlt	r4, r4, r3
 80069a2:	f000 f8df 	bl	8006b64 <__malloc_lock>
 80069a6:	4a1e      	ldr	r2, [pc, #120]	; (8006a20 <_free_r+0x94>)
 80069a8:	9801      	ldr	r0, [sp, #4]
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	b933      	cbnz	r3, 80069bc <_free_r+0x30>
 80069ae:	6063      	str	r3, [r4, #4]
 80069b0:	6014      	str	r4, [r2, #0]
 80069b2:	b003      	add	sp, #12
 80069b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069b8:	f000 b8da 	b.w	8006b70 <__malloc_unlock>
 80069bc:	42a3      	cmp	r3, r4
 80069be:	d908      	bls.n	80069d2 <_free_r+0x46>
 80069c0:	6825      	ldr	r5, [r4, #0]
 80069c2:	1961      	adds	r1, r4, r5
 80069c4:	428b      	cmp	r3, r1
 80069c6:	bf01      	itttt	eq
 80069c8:	6819      	ldreq	r1, [r3, #0]
 80069ca:	685b      	ldreq	r3, [r3, #4]
 80069cc:	1949      	addeq	r1, r1, r5
 80069ce:	6021      	streq	r1, [r4, #0]
 80069d0:	e7ed      	b.n	80069ae <_free_r+0x22>
 80069d2:	461a      	mov	r2, r3
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	b10b      	cbz	r3, 80069dc <_free_r+0x50>
 80069d8:	42a3      	cmp	r3, r4
 80069da:	d9fa      	bls.n	80069d2 <_free_r+0x46>
 80069dc:	6811      	ldr	r1, [r2, #0]
 80069de:	1855      	adds	r5, r2, r1
 80069e0:	42a5      	cmp	r5, r4
 80069e2:	d10b      	bne.n	80069fc <_free_r+0x70>
 80069e4:	6824      	ldr	r4, [r4, #0]
 80069e6:	4421      	add	r1, r4
 80069e8:	1854      	adds	r4, r2, r1
 80069ea:	42a3      	cmp	r3, r4
 80069ec:	6011      	str	r1, [r2, #0]
 80069ee:	d1e0      	bne.n	80069b2 <_free_r+0x26>
 80069f0:	681c      	ldr	r4, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	6053      	str	r3, [r2, #4]
 80069f6:	440c      	add	r4, r1
 80069f8:	6014      	str	r4, [r2, #0]
 80069fa:	e7da      	b.n	80069b2 <_free_r+0x26>
 80069fc:	d902      	bls.n	8006a04 <_free_r+0x78>
 80069fe:	230c      	movs	r3, #12
 8006a00:	6003      	str	r3, [r0, #0]
 8006a02:	e7d6      	b.n	80069b2 <_free_r+0x26>
 8006a04:	6825      	ldr	r5, [r4, #0]
 8006a06:	1961      	adds	r1, r4, r5
 8006a08:	428b      	cmp	r3, r1
 8006a0a:	bf04      	itt	eq
 8006a0c:	6819      	ldreq	r1, [r3, #0]
 8006a0e:	685b      	ldreq	r3, [r3, #4]
 8006a10:	6063      	str	r3, [r4, #4]
 8006a12:	bf04      	itt	eq
 8006a14:	1949      	addeq	r1, r1, r5
 8006a16:	6021      	streq	r1, [r4, #0]
 8006a18:	6054      	str	r4, [r2, #4]
 8006a1a:	e7ca      	b.n	80069b2 <_free_r+0x26>
 8006a1c:	b003      	add	sp, #12
 8006a1e:	bd30      	pop	{r4, r5, pc}
 8006a20:	20001638 	.word	0x20001638

08006a24 <sbrk_aligned>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	4e0e      	ldr	r6, [pc, #56]	; (8006a60 <sbrk_aligned+0x3c>)
 8006a28:	460c      	mov	r4, r1
 8006a2a:	6831      	ldr	r1, [r6, #0]
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	b911      	cbnz	r1, 8006a36 <sbrk_aligned+0x12>
 8006a30:	f000 fba6 	bl	8007180 <_sbrk_r>
 8006a34:	6030      	str	r0, [r6, #0]
 8006a36:	4621      	mov	r1, r4
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f000 fba1 	bl	8007180 <_sbrk_r>
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	d00a      	beq.n	8006a58 <sbrk_aligned+0x34>
 8006a42:	1cc4      	adds	r4, r0, #3
 8006a44:	f024 0403 	bic.w	r4, r4, #3
 8006a48:	42a0      	cmp	r0, r4
 8006a4a:	d007      	beq.n	8006a5c <sbrk_aligned+0x38>
 8006a4c:	1a21      	subs	r1, r4, r0
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 fb96 	bl	8007180 <_sbrk_r>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d101      	bne.n	8006a5c <sbrk_aligned+0x38>
 8006a58:	f04f 34ff 	mov.w	r4, #4294967295
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
 8006a60:	2000163c 	.word	0x2000163c

08006a64 <_malloc_r>:
 8006a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a68:	1ccd      	adds	r5, r1, #3
 8006a6a:	f025 0503 	bic.w	r5, r5, #3
 8006a6e:	3508      	adds	r5, #8
 8006a70:	2d0c      	cmp	r5, #12
 8006a72:	bf38      	it	cc
 8006a74:	250c      	movcc	r5, #12
 8006a76:	2d00      	cmp	r5, #0
 8006a78:	4607      	mov	r7, r0
 8006a7a:	db01      	blt.n	8006a80 <_malloc_r+0x1c>
 8006a7c:	42a9      	cmp	r1, r5
 8006a7e:	d905      	bls.n	8006a8c <_malloc_r+0x28>
 8006a80:	230c      	movs	r3, #12
 8006a82:	603b      	str	r3, [r7, #0]
 8006a84:	2600      	movs	r6, #0
 8006a86:	4630      	mov	r0, r6
 8006a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b60 <_malloc_r+0xfc>
 8006a90:	f000 f868 	bl	8006b64 <__malloc_lock>
 8006a94:	f8d8 3000 	ldr.w	r3, [r8]
 8006a98:	461c      	mov	r4, r3
 8006a9a:	bb5c      	cbnz	r4, 8006af4 <_malloc_r+0x90>
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	f7ff ffc0 	bl	8006a24 <sbrk_aligned>
 8006aa4:	1c43      	adds	r3, r0, #1
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	d155      	bne.n	8006b56 <_malloc_r+0xf2>
 8006aaa:	f8d8 4000 	ldr.w	r4, [r8]
 8006aae:	4626      	mov	r6, r4
 8006ab0:	2e00      	cmp	r6, #0
 8006ab2:	d145      	bne.n	8006b40 <_malloc_r+0xdc>
 8006ab4:	2c00      	cmp	r4, #0
 8006ab6:	d048      	beq.n	8006b4a <_malloc_r+0xe6>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	4631      	mov	r1, r6
 8006abc:	4638      	mov	r0, r7
 8006abe:	eb04 0903 	add.w	r9, r4, r3
 8006ac2:	f000 fb5d 	bl	8007180 <_sbrk_r>
 8006ac6:	4581      	cmp	r9, r0
 8006ac8:	d13f      	bne.n	8006b4a <_malloc_r+0xe6>
 8006aca:	6821      	ldr	r1, [r4, #0]
 8006acc:	1a6d      	subs	r5, r5, r1
 8006ace:	4629      	mov	r1, r5
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	f7ff ffa7 	bl	8006a24 <sbrk_aligned>
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	d037      	beq.n	8006b4a <_malloc_r+0xe6>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	442b      	add	r3, r5
 8006ade:	6023      	str	r3, [r4, #0]
 8006ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d038      	beq.n	8006b5a <_malloc_r+0xf6>
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	42a2      	cmp	r2, r4
 8006aec:	d12b      	bne.n	8006b46 <_malloc_r+0xe2>
 8006aee:	2200      	movs	r2, #0
 8006af0:	605a      	str	r2, [r3, #4]
 8006af2:	e00f      	b.n	8006b14 <_malloc_r+0xb0>
 8006af4:	6822      	ldr	r2, [r4, #0]
 8006af6:	1b52      	subs	r2, r2, r5
 8006af8:	d41f      	bmi.n	8006b3a <_malloc_r+0xd6>
 8006afa:	2a0b      	cmp	r2, #11
 8006afc:	d917      	bls.n	8006b2e <_malloc_r+0xca>
 8006afe:	1961      	adds	r1, r4, r5
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	6025      	str	r5, [r4, #0]
 8006b04:	bf18      	it	ne
 8006b06:	6059      	strne	r1, [r3, #4]
 8006b08:	6863      	ldr	r3, [r4, #4]
 8006b0a:	bf08      	it	eq
 8006b0c:	f8c8 1000 	streq.w	r1, [r8]
 8006b10:	5162      	str	r2, [r4, r5]
 8006b12:	604b      	str	r3, [r1, #4]
 8006b14:	4638      	mov	r0, r7
 8006b16:	f104 060b 	add.w	r6, r4, #11
 8006b1a:	f000 f829 	bl	8006b70 <__malloc_unlock>
 8006b1e:	f026 0607 	bic.w	r6, r6, #7
 8006b22:	1d23      	adds	r3, r4, #4
 8006b24:	1af2      	subs	r2, r6, r3
 8006b26:	d0ae      	beq.n	8006a86 <_malloc_r+0x22>
 8006b28:	1b9b      	subs	r3, r3, r6
 8006b2a:	50a3      	str	r3, [r4, r2]
 8006b2c:	e7ab      	b.n	8006a86 <_malloc_r+0x22>
 8006b2e:	42a3      	cmp	r3, r4
 8006b30:	6862      	ldr	r2, [r4, #4]
 8006b32:	d1dd      	bne.n	8006af0 <_malloc_r+0x8c>
 8006b34:	f8c8 2000 	str.w	r2, [r8]
 8006b38:	e7ec      	b.n	8006b14 <_malloc_r+0xb0>
 8006b3a:	4623      	mov	r3, r4
 8006b3c:	6864      	ldr	r4, [r4, #4]
 8006b3e:	e7ac      	b.n	8006a9a <_malloc_r+0x36>
 8006b40:	4634      	mov	r4, r6
 8006b42:	6876      	ldr	r6, [r6, #4]
 8006b44:	e7b4      	b.n	8006ab0 <_malloc_r+0x4c>
 8006b46:	4613      	mov	r3, r2
 8006b48:	e7cc      	b.n	8006ae4 <_malloc_r+0x80>
 8006b4a:	230c      	movs	r3, #12
 8006b4c:	603b      	str	r3, [r7, #0]
 8006b4e:	4638      	mov	r0, r7
 8006b50:	f000 f80e 	bl	8006b70 <__malloc_unlock>
 8006b54:	e797      	b.n	8006a86 <_malloc_r+0x22>
 8006b56:	6025      	str	r5, [r4, #0]
 8006b58:	e7dc      	b.n	8006b14 <_malloc_r+0xb0>
 8006b5a:	605b      	str	r3, [r3, #4]
 8006b5c:	deff      	udf	#255	; 0xff
 8006b5e:	bf00      	nop
 8006b60:	20001638 	.word	0x20001638

08006b64 <__malloc_lock>:
 8006b64:	4801      	ldr	r0, [pc, #4]	; (8006b6c <__malloc_lock+0x8>)
 8006b66:	f7ff bf01 	b.w	800696c <__retarget_lock_acquire_recursive>
 8006b6a:	bf00      	nop
 8006b6c:	20001634 	.word	0x20001634

08006b70 <__malloc_unlock>:
 8006b70:	4801      	ldr	r0, [pc, #4]	; (8006b78 <__malloc_unlock+0x8>)
 8006b72:	f7ff befc 	b.w	800696e <__retarget_lock_release_recursive>
 8006b76:	bf00      	nop
 8006b78:	20001634 	.word	0x20001634

08006b7c <__ssputs_r>:
 8006b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b80:	688e      	ldr	r6, [r1, #8]
 8006b82:	461f      	mov	r7, r3
 8006b84:	42be      	cmp	r6, r7
 8006b86:	680b      	ldr	r3, [r1, #0]
 8006b88:	4682      	mov	sl, r0
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	4690      	mov	r8, r2
 8006b8e:	d82c      	bhi.n	8006bea <__ssputs_r+0x6e>
 8006b90:	898a      	ldrh	r2, [r1, #12]
 8006b92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b96:	d026      	beq.n	8006be6 <__ssputs_r+0x6a>
 8006b98:	6965      	ldr	r5, [r4, #20]
 8006b9a:	6909      	ldr	r1, [r1, #16]
 8006b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ba0:	eba3 0901 	sub.w	r9, r3, r1
 8006ba4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ba8:	1c7b      	adds	r3, r7, #1
 8006baa:	444b      	add	r3, r9
 8006bac:	106d      	asrs	r5, r5, #1
 8006bae:	429d      	cmp	r5, r3
 8006bb0:	bf38      	it	cc
 8006bb2:	461d      	movcc	r5, r3
 8006bb4:	0553      	lsls	r3, r2, #21
 8006bb6:	d527      	bpl.n	8006c08 <__ssputs_r+0x8c>
 8006bb8:	4629      	mov	r1, r5
 8006bba:	f7ff ff53 	bl	8006a64 <_malloc_r>
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	b360      	cbz	r0, 8006c1c <__ssputs_r+0xa0>
 8006bc2:	6921      	ldr	r1, [r4, #16]
 8006bc4:	464a      	mov	r2, r9
 8006bc6:	f7ff fed3 	bl	8006970 <memcpy>
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd4:	81a3      	strh	r3, [r4, #12]
 8006bd6:	6126      	str	r6, [r4, #16]
 8006bd8:	6165      	str	r5, [r4, #20]
 8006bda:	444e      	add	r6, r9
 8006bdc:	eba5 0509 	sub.w	r5, r5, r9
 8006be0:	6026      	str	r6, [r4, #0]
 8006be2:	60a5      	str	r5, [r4, #8]
 8006be4:	463e      	mov	r6, r7
 8006be6:	42be      	cmp	r6, r7
 8006be8:	d900      	bls.n	8006bec <__ssputs_r+0x70>
 8006bea:	463e      	mov	r6, r7
 8006bec:	6820      	ldr	r0, [r4, #0]
 8006bee:	4632      	mov	r2, r6
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	f000 faab 	bl	800714c <memmove>
 8006bf6:	68a3      	ldr	r3, [r4, #8]
 8006bf8:	1b9b      	subs	r3, r3, r6
 8006bfa:	60a3      	str	r3, [r4, #8]
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	4433      	add	r3, r6
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	2000      	movs	r0, #0
 8006c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c08:	462a      	mov	r2, r5
 8006c0a:	f000 fac9 	bl	80071a0 <_realloc_r>
 8006c0e:	4606      	mov	r6, r0
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d1e0      	bne.n	8006bd6 <__ssputs_r+0x5a>
 8006c14:	6921      	ldr	r1, [r4, #16]
 8006c16:	4650      	mov	r0, sl
 8006c18:	f7ff feb8 	bl	800698c <_free_r>
 8006c1c:	230c      	movs	r3, #12
 8006c1e:	f8ca 3000 	str.w	r3, [sl]
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2e:	e7e9      	b.n	8006c04 <__ssputs_r+0x88>

08006c30 <_svfiprintf_r>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	4698      	mov	r8, r3
 8006c36:	898b      	ldrh	r3, [r1, #12]
 8006c38:	061b      	lsls	r3, r3, #24
 8006c3a:	b09d      	sub	sp, #116	; 0x74
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	460d      	mov	r5, r1
 8006c40:	4614      	mov	r4, r2
 8006c42:	d50e      	bpl.n	8006c62 <_svfiprintf_r+0x32>
 8006c44:	690b      	ldr	r3, [r1, #16]
 8006c46:	b963      	cbnz	r3, 8006c62 <_svfiprintf_r+0x32>
 8006c48:	2140      	movs	r1, #64	; 0x40
 8006c4a:	f7ff ff0b 	bl	8006a64 <_malloc_r>
 8006c4e:	6028      	str	r0, [r5, #0]
 8006c50:	6128      	str	r0, [r5, #16]
 8006c52:	b920      	cbnz	r0, 8006c5e <_svfiprintf_r+0x2e>
 8006c54:	230c      	movs	r3, #12
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	e0d0      	b.n	8006e00 <_svfiprintf_r+0x1d0>
 8006c5e:	2340      	movs	r3, #64	; 0x40
 8006c60:	616b      	str	r3, [r5, #20]
 8006c62:	2300      	movs	r3, #0
 8006c64:	9309      	str	r3, [sp, #36]	; 0x24
 8006c66:	2320      	movs	r3, #32
 8006c68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c70:	2330      	movs	r3, #48	; 0x30
 8006c72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e18 <_svfiprintf_r+0x1e8>
 8006c76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c7a:	f04f 0901 	mov.w	r9, #1
 8006c7e:	4623      	mov	r3, r4
 8006c80:	469a      	mov	sl, r3
 8006c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c86:	b10a      	cbz	r2, 8006c8c <_svfiprintf_r+0x5c>
 8006c88:	2a25      	cmp	r2, #37	; 0x25
 8006c8a:	d1f9      	bne.n	8006c80 <_svfiprintf_r+0x50>
 8006c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c90:	d00b      	beq.n	8006caa <_svfiprintf_r+0x7a>
 8006c92:	465b      	mov	r3, fp
 8006c94:	4622      	mov	r2, r4
 8006c96:	4629      	mov	r1, r5
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f7ff ff6f 	bl	8006b7c <__ssputs_r>
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	f000 80a9 	beq.w	8006df6 <_svfiprintf_r+0x1c6>
 8006ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ca6:	445a      	add	r2, fp
 8006ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8006caa:	f89a 3000 	ldrb.w	r3, [sl]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 80a1 	beq.w	8006df6 <_svfiprintf_r+0x1c6>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cbe:	f10a 0a01 	add.w	sl, sl, #1
 8006cc2:	9304      	str	r3, [sp, #16]
 8006cc4:	9307      	str	r3, [sp, #28]
 8006cc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cca:	931a      	str	r3, [sp, #104]	; 0x68
 8006ccc:	4654      	mov	r4, sl
 8006cce:	2205      	movs	r2, #5
 8006cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd4:	4850      	ldr	r0, [pc, #320]	; (8006e18 <_svfiprintf_r+0x1e8>)
 8006cd6:	f7f9 fa83 	bl	80001e0 <memchr>
 8006cda:	9a04      	ldr	r2, [sp, #16]
 8006cdc:	b9d8      	cbnz	r0, 8006d16 <_svfiprintf_r+0xe6>
 8006cde:	06d0      	lsls	r0, r2, #27
 8006ce0:	bf44      	itt	mi
 8006ce2:	2320      	movmi	r3, #32
 8006ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ce8:	0711      	lsls	r1, r2, #28
 8006cea:	bf44      	itt	mi
 8006cec:	232b      	movmi	r3, #43	; 0x2b
 8006cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf8:	d015      	beq.n	8006d26 <_svfiprintf_r+0xf6>
 8006cfa:	9a07      	ldr	r2, [sp, #28]
 8006cfc:	4654      	mov	r4, sl
 8006cfe:	2000      	movs	r0, #0
 8006d00:	f04f 0c0a 	mov.w	ip, #10
 8006d04:	4621      	mov	r1, r4
 8006d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d0a:	3b30      	subs	r3, #48	; 0x30
 8006d0c:	2b09      	cmp	r3, #9
 8006d0e:	d94d      	bls.n	8006dac <_svfiprintf_r+0x17c>
 8006d10:	b1b0      	cbz	r0, 8006d40 <_svfiprintf_r+0x110>
 8006d12:	9207      	str	r2, [sp, #28]
 8006d14:	e014      	b.n	8006d40 <_svfiprintf_r+0x110>
 8006d16:	eba0 0308 	sub.w	r3, r0, r8
 8006d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	9304      	str	r3, [sp, #16]
 8006d22:	46a2      	mov	sl, r4
 8006d24:	e7d2      	b.n	8006ccc <_svfiprintf_r+0x9c>
 8006d26:	9b03      	ldr	r3, [sp, #12]
 8006d28:	1d19      	adds	r1, r3, #4
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	9103      	str	r1, [sp, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bfbb      	ittet	lt
 8006d32:	425b      	neglt	r3, r3
 8006d34:	f042 0202 	orrlt.w	r2, r2, #2
 8006d38:	9307      	strge	r3, [sp, #28]
 8006d3a:	9307      	strlt	r3, [sp, #28]
 8006d3c:	bfb8      	it	lt
 8006d3e:	9204      	strlt	r2, [sp, #16]
 8006d40:	7823      	ldrb	r3, [r4, #0]
 8006d42:	2b2e      	cmp	r3, #46	; 0x2e
 8006d44:	d10c      	bne.n	8006d60 <_svfiprintf_r+0x130>
 8006d46:	7863      	ldrb	r3, [r4, #1]
 8006d48:	2b2a      	cmp	r3, #42	; 0x2a
 8006d4a:	d134      	bne.n	8006db6 <_svfiprintf_r+0x186>
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	1d1a      	adds	r2, r3, #4
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	9203      	str	r2, [sp, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	bfb8      	it	lt
 8006d58:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d5c:	3402      	adds	r4, #2
 8006d5e:	9305      	str	r3, [sp, #20]
 8006d60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006e28 <_svfiprintf_r+0x1f8>
 8006d64:	7821      	ldrb	r1, [r4, #0]
 8006d66:	2203      	movs	r2, #3
 8006d68:	4650      	mov	r0, sl
 8006d6a:	f7f9 fa39 	bl	80001e0 <memchr>
 8006d6e:	b138      	cbz	r0, 8006d80 <_svfiprintf_r+0x150>
 8006d70:	9b04      	ldr	r3, [sp, #16]
 8006d72:	eba0 000a 	sub.w	r0, r0, sl
 8006d76:	2240      	movs	r2, #64	; 0x40
 8006d78:	4082      	lsls	r2, r0
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	3401      	adds	r4, #1
 8006d7e:	9304      	str	r3, [sp, #16]
 8006d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d84:	4825      	ldr	r0, [pc, #148]	; (8006e1c <_svfiprintf_r+0x1ec>)
 8006d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d8a:	2206      	movs	r2, #6
 8006d8c:	f7f9 fa28 	bl	80001e0 <memchr>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d038      	beq.n	8006e06 <_svfiprintf_r+0x1d6>
 8006d94:	4b22      	ldr	r3, [pc, #136]	; (8006e20 <_svfiprintf_r+0x1f0>)
 8006d96:	bb1b      	cbnz	r3, 8006de0 <_svfiprintf_r+0x1b0>
 8006d98:	9b03      	ldr	r3, [sp, #12]
 8006d9a:	3307      	adds	r3, #7
 8006d9c:	f023 0307 	bic.w	r3, r3, #7
 8006da0:	3308      	adds	r3, #8
 8006da2:	9303      	str	r3, [sp, #12]
 8006da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da6:	4433      	add	r3, r6
 8006da8:	9309      	str	r3, [sp, #36]	; 0x24
 8006daa:	e768      	b.n	8006c7e <_svfiprintf_r+0x4e>
 8006dac:	fb0c 3202 	mla	r2, ip, r2, r3
 8006db0:	460c      	mov	r4, r1
 8006db2:	2001      	movs	r0, #1
 8006db4:	e7a6      	b.n	8006d04 <_svfiprintf_r+0xd4>
 8006db6:	2300      	movs	r3, #0
 8006db8:	3401      	adds	r4, #1
 8006dba:	9305      	str	r3, [sp, #20]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	f04f 0c0a 	mov.w	ip, #10
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc8:	3a30      	subs	r2, #48	; 0x30
 8006dca:	2a09      	cmp	r2, #9
 8006dcc:	d903      	bls.n	8006dd6 <_svfiprintf_r+0x1a6>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0c6      	beq.n	8006d60 <_svfiprintf_r+0x130>
 8006dd2:	9105      	str	r1, [sp, #20]
 8006dd4:	e7c4      	b.n	8006d60 <_svfiprintf_r+0x130>
 8006dd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dda:	4604      	mov	r4, r0
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e7f0      	b.n	8006dc2 <_svfiprintf_r+0x192>
 8006de0:	ab03      	add	r3, sp, #12
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	462a      	mov	r2, r5
 8006de6:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <_svfiprintf_r+0x1f4>)
 8006de8:	a904      	add	r1, sp, #16
 8006dea:	4638      	mov	r0, r7
 8006dec:	f3af 8000 	nop.w
 8006df0:	1c42      	adds	r2, r0, #1
 8006df2:	4606      	mov	r6, r0
 8006df4:	d1d6      	bne.n	8006da4 <_svfiprintf_r+0x174>
 8006df6:	89ab      	ldrh	r3, [r5, #12]
 8006df8:	065b      	lsls	r3, r3, #25
 8006dfa:	f53f af2d 	bmi.w	8006c58 <_svfiprintf_r+0x28>
 8006dfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e00:	b01d      	add	sp, #116	; 0x74
 8006e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e06:	ab03      	add	r3, sp, #12
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	462a      	mov	r2, r5
 8006e0c:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <_svfiprintf_r+0x1f4>)
 8006e0e:	a904      	add	r1, sp, #16
 8006e10:	4638      	mov	r0, r7
 8006e12:	f000 f879 	bl	8006f08 <_printf_i>
 8006e16:	e7eb      	b.n	8006df0 <_svfiprintf_r+0x1c0>
 8006e18:	08007448 	.word	0x08007448
 8006e1c:	08007452 	.word	0x08007452
 8006e20:	00000000 	.word	0x00000000
 8006e24:	08006b7d 	.word	0x08006b7d
 8006e28:	0800744e 	.word	0x0800744e

08006e2c <_printf_common>:
 8006e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e30:	4616      	mov	r6, r2
 8006e32:	4699      	mov	r9, r3
 8006e34:	688a      	ldr	r2, [r1, #8]
 8006e36:	690b      	ldr	r3, [r1, #16]
 8006e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	bfb8      	it	lt
 8006e40:	4613      	movlt	r3, r2
 8006e42:	6033      	str	r3, [r6, #0]
 8006e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e48:	4607      	mov	r7, r0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	b10a      	cbz	r2, 8006e52 <_printf_common+0x26>
 8006e4e:	3301      	adds	r3, #1
 8006e50:	6033      	str	r3, [r6, #0]
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	0699      	lsls	r1, r3, #26
 8006e56:	bf42      	ittt	mi
 8006e58:	6833      	ldrmi	r3, [r6, #0]
 8006e5a:	3302      	addmi	r3, #2
 8006e5c:	6033      	strmi	r3, [r6, #0]
 8006e5e:	6825      	ldr	r5, [r4, #0]
 8006e60:	f015 0506 	ands.w	r5, r5, #6
 8006e64:	d106      	bne.n	8006e74 <_printf_common+0x48>
 8006e66:	f104 0a19 	add.w	sl, r4, #25
 8006e6a:	68e3      	ldr	r3, [r4, #12]
 8006e6c:	6832      	ldr	r2, [r6, #0]
 8006e6e:	1a9b      	subs	r3, r3, r2
 8006e70:	42ab      	cmp	r3, r5
 8006e72:	dc26      	bgt.n	8006ec2 <_printf_common+0x96>
 8006e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e78:	1e13      	subs	r3, r2, #0
 8006e7a:	6822      	ldr	r2, [r4, #0]
 8006e7c:	bf18      	it	ne
 8006e7e:	2301      	movne	r3, #1
 8006e80:	0692      	lsls	r2, r2, #26
 8006e82:	d42b      	bmi.n	8006edc <_printf_common+0xb0>
 8006e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e88:	4649      	mov	r1, r9
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	47c0      	blx	r8
 8006e8e:	3001      	adds	r0, #1
 8006e90:	d01e      	beq.n	8006ed0 <_printf_common+0xa4>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	6922      	ldr	r2, [r4, #16]
 8006e96:	f003 0306 	and.w	r3, r3, #6
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	bf02      	ittt	eq
 8006e9e:	68e5      	ldreq	r5, [r4, #12]
 8006ea0:	6833      	ldreq	r3, [r6, #0]
 8006ea2:	1aed      	subeq	r5, r5, r3
 8006ea4:	68a3      	ldr	r3, [r4, #8]
 8006ea6:	bf0c      	ite	eq
 8006ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eac:	2500      	movne	r5, #0
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	bfc4      	itt	gt
 8006eb2:	1a9b      	subgt	r3, r3, r2
 8006eb4:	18ed      	addgt	r5, r5, r3
 8006eb6:	2600      	movs	r6, #0
 8006eb8:	341a      	adds	r4, #26
 8006eba:	42b5      	cmp	r5, r6
 8006ebc:	d11a      	bne.n	8006ef4 <_printf_common+0xc8>
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	e008      	b.n	8006ed4 <_printf_common+0xa8>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	4652      	mov	r2, sl
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	4638      	mov	r0, r7
 8006eca:	47c0      	blx	r8
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d103      	bne.n	8006ed8 <_printf_common+0xac>
 8006ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed8:	3501      	adds	r5, #1
 8006eda:	e7c6      	b.n	8006e6a <_printf_common+0x3e>
 8006edc:	18e1      	adds	r1, r4, r3
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	2030      	movs	r0, #48	; 0x30
 8006ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ee6:	4422      	add	r2, r4
 8006ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ef0:	3302      	adds	r3, #2
 8006ef2:	e7c7      	b.n	8006e84 <_printf_common+0x58>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	4622      	mov	r2, r4
 8006ef8:	4649      	mov	r1, r9
 8006efa:	4638      	mov	r0, r7
 8006efc:	47c0      	blx	r8
 8006efe:	3001      	adds	r0, #1
 8006f00:	d0e6      	beq.n	8006ed0 <_printf_common+0xa4>
 8006f02:	3601      	adds	r6, #1
 8006f04:	e7d9      	b.n	8006eba <_printf_common+0x8e>
	...

08006f08 <_printf_i>:
 8006f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f0c:	7e0f      	ldrb	r7, [r1, #24]
 8006f0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f10:	2f78      	cmp	r7, #120	; 0x78
 8006f12:	4691      	mov	r9, r2
 8006f14:	4680      	mov	r8, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	469a      	mov	sl, r3
 8006f1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f1e:	d807      	bhi.n	8006f30 <_printf_i+0x28>
 8006f20:	2f62      	cmp	r7, #98	; 0x62
 8006f22:	d80a      	bhi.n	8006f3a <_printf_i+0x32>
 8006f24:	2f00      	cmp	r7, #0
 8006f26:	f000 80d4 	beq.w	80070d2 <_printf_i+0x1ca>
 8006f2a:	2f58      	cmp	r7, #88	; 0x58
 8006f2c:	f000 80c0 	beq.w	80070b0 <_printf_i+0x1a8>
 8006f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f38:	e03a      	b.n	8006fb0 <_printf_i+0xa8>
 8006f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f3e:	2b15      	cmp	r3, #21
 8006f40:	d8f6      	bhi.n	8006f30 <_printf_i+0x28>
 8006f42:	a101      	add	r1, pc, #4	; (adr r1, 8006f48 <_printf_i+0x40>)
 8006f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f48:	08006fa1 	.word	0x08006fa1
 8006f4c:	08006fb5 	.word	0x08006fb5
 8006f50:	08006f31 	.word	0x08006f31
 8006f54:	08006f31 	.word	0x08006f31
 8006f58:	08006f31 	.word	0x08006f31
 8006f5c:	08006f31 	.word	0x08006f31
 8006f60:	08006fb5 	.word	0x08006fb5
 8006f64:	08006f31 	.word	0x08006f31
 8006f68:	08006f31 	.word	0x08006f31
 8006f6c:	08006f31 	.word	0x08006f31
 8006f70:	08006f31 	.word	0x08006f31
 8006f74:	080070b9 	.word	0x080070b9
 8006f78:	08006fe1 	.word	0x08006fe1
 8006f7c:	08007073 	.word	0x08007073
 8006f80:	08006f31 	.word	0x08006f31
 8006f84:	08006f31 	.word	0x08006f31
 8006f88:	080070db 	.word	0x080070db
 8006f8c:	08006f31 	.word	0x08006f31
 8006f90:	08006fe1 	.word	0x08006fe1
 8006f94:	08006f31 	.word	0x08006f31
 8006f98:	08006f31 	.word	0x08006f31
 8006f9c:	0800707b 	.word	0x0800707b
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	1d1a      	adds	r2, r3, #4
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	602a      	str	r2, [r5, #0]
 8006fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e09f      	b.n	80070f4 <_printf_i+0x1ec>
 8006fb4:	6820      	ldr	r0, [r4, #0]
 8006fb6:	682b      	ldr	r3, [r5, #0]
 8006fb8:	0607      	lsls	r7, r0, #24
 8006fba:	f103 0104 	add.w	r1, r3, #4
 8006fbe:	6029      	str	r1, [r5, #0]
 8006fc0:	d501      	bpl.n	8006fc6 <_printf_i+0xbe>
 8006fc2:	681e      	ldr	r6, [r3, #0]
 8006fc4:	e003      	b.n	8006fce <_printf_i+0xc6>
 8006fc6:	0646      	lsls	r6, r0, #25
 8006fc8:	d5fb      	bpl.n	8006fc2 <_printf_i+0xba>
 8006fca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006fce:	2e00      	cmp	r6, #0
 8006fd0:	da03      	bge.n	8006fda <_printf_i+0xd2>
 8006fd2:	232d      	movs	r3, #45	; 0x2d
 8006fd4:	4276      	negs	r6, r6
 8006fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fda:	485a      	ldr	r0, [pc, #360]	; (8007144 <_printf_i+0x23c>)
 8006fdc:	230a      	movs	r3, #10
 8006fde:	e012      	b.n	8007006 <_printf_i+0xfe>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	6820      	ldr	r0, [r4, #0]
 8006fe4:	1d19      	adds	r1, r3, #4
 8006fe6:	6029      	str	r1, [r5, #0]
 8006fe8:	0605      	lsls	r5, r0, #24
 8006fea:	d501      	bpl.n	8006ff0 <_printf_i+0xe8>
 8006fec:	681e      	ldr	r6, [r3, #0]
 8006fee:	e002      	b.n	8006ff6 <_printf_i+0xee>
 8006ff0:	0641      	lsls	r1, r0, #25
 8006ff2:	d5fb      	bpl.n	8006fec <_printf_i+0xe4>
 8006ff4:	881e      	ldrh	r6, [r3, #0]
 8006ff6:	4853      	ldr	r0, [pc, #332]	; (8007144 <_printf_i+0x23c>)
 8006ff8:	2f6f      	cmp	r7, #111	; 0x6f
 8006ffa:	bf0c      	ite	eq
 8006ffc:	2308      	moveq	r3, #8
 8006ffe:	230a      	movne	r3, #10
 8007000:	2100      	movs	r1, #0
 8007002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007006:	6865      	ldr	r5, [r4, #4]
 8007008:	60a5      	str	r5, [r4, #8]
 800700a:	2d00      	cmp	r5, #0
 800700c:	bfa2      	ittt	ge
 800700e:	6821      	ldrge	r1, [r4, #0]
 8007010:	f021 0104 	bicge.w	r1, r1, #4
 8007014:	6021      	strge	r1, [r4, #0]
 8007016:	b90e      	cbnz	r6, 800701c <_printf_i+0x114>
 8007018:	2d00      	cmp	r5, #0
 800701a:	d04b      	beq.n	80070b4 <_printf_i+0x1ac>
 800701c:	4615      	mov	r5, r2
 800701e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007022:	fb03 6711 	mls	r7, r3, r1, r6
 8007026:	5dc7      	ldrb	r7, [r0, r7]
 8007028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800702c:	4637      	mov	r7, r6
 800702e:	42bb      	cmp	r3, r7
 8007030:	460e      	mov	r6, r1
 8007032:	d9f4      	bls.n	800701e <_printf_i+0x116>
 8007034:	2b08      	cmp	r3, #8
 8007036:	d10b      	bne.n	8007050 <_printf_i+0x148>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	07de      	lsls	r6, r3, #31
 800703c:	d508      	bpl.n	8007050 <_printf_i+0x148>
 800703e:	6923      	ldr	r3, [r4, #16]
 8007040:	6861      	ldr	r1, [r4, #4]
 8007042:	4299      	cmp	r1, r3
 8007044:	bfde      	ittt	le
 8007046:	2330      	movle	r3, #48	; 0x30
 8007048:	f805 3c01 	strble.w	r3, [r5, #-1]
 800704c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007050:	1b52      	subs	r2, r2, r5
 8007052:	6122      	str	r2, [r4, #16]
 8007054:	f8cd a000 	str.w	sl, [sp]
 8007058:	464b      	mov	r3, r9
 800705a:	aa03      	add	r2, sp, #12
 800705c:	4621      	mov	r1, r4
 800705e:	4640      	mov	r0, r8
 8007060:	f7ff fee4 	bl	8006e2c <_printf_common>
 8007064:	3001      	adds	r0, #1
 8007066:	d14a      	bne.n	80070fe <_printf_i+0x1f6>
 8007068:	f04f 30ff 	mov.w	r0, #4294967295
 800706c:	b004      	add	sp, #16
 800706e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	f043 0320 	orr.w	r3, r3, #32
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	4833      	ldr	r0, [pc, #204]	; (8007148 <_printf_i+0x240>)
 800707c:	2778      	movs	r7, #120	; 0x78
 800707e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	6829      	ldr	r1, [r5, #0]
 8007086:	061f      	lsls	r7, r3, #24
 8007088:	f851 6b04 	ldr.w	r6, [r1], #4
 800708c:	d402      	bmi.n	8007094 <_printf_i+0x18c>
 800708e:	065f      	lsls	r7, r3, #25
 8007090:	bf48      	it	mi
 8007092:	b2b6      	uxthmi	r6, r6
 8007094:	07df      	lsls	r7, r3, #31
 8007096:	bf48      	it	mi
 8007098:	f043 0320 	orrmi.w	r3, r3, #32
 800709c:	6029      	str	r1, [r5, #0]
 800709e:	bf48      	it	mi
 80070a0:	6023      	strmi	r3, [r4, #0]
 80070a2:	b91e      	cbnz	r6, 80070ac <_printf_i+0x1a4>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	f023 0320 	bic.w	r3, r3, #32
 80070aa:	6023      	str	r3, [r4, #0]
 80070ac:	2310      	movs	r3, #16
 80070ae:	e7a7      	b.n	8007000 <_printf_i+0xf8>
 80070b0:	4824      	ldr	r0, [pc, #144]	; (8007144 <_printf_i+0x23c>)
 80070b2:	e7e4      	b.n	800707e <_printf_i+0x176>
 80070b4:	4615      	mov	r5, r2
 80070b6:	e7bd      	b.n	8007034 <_printf_i+0x12c>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	6826      	ldr	r6, [r4, #0]
 80070bc:	6961      	ldr	r1, [r4, #20]
 80070be:	1d18      	adds	r0, r3, #4
 80070c0:	6028      	str	r0, [r5, #0]
 80070c2:	0635      	lsls	r5, r6, #24
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	d501      	bpl.n	80070cc <_printf_i+0x1c4>
 80070c8:	6019      	str	r1, [r3, #0]
 80070ca:	e002      	b.n	80070d2 <_printf_i+0x1ca>
 80070cc:	0670      	lsls	r0, r6, #25
 80070ce:	d5fb      	bpl.n	80070c8 <_printf_i+0x1c0>
 80070d0:	8019      	strh	r1, [r3, #0]
 80070d2:	2300      	movs	r3, #0
 80070d4:	6123      	str	r3, [r4, #16]
 80070d6:	4615      	mov	r5, r2
 80070d8:	e7bc      	b.n	8007054 <_printf_i+0x14c>
 80070da:	682b      	ldr	r3, [r5, #0]
 80070dc:	1d1a      	adds	r2, r3, #4
 80070de:	602a      	str	r2, [r5, #0]
 80070e0:	681d      	ldr	r5, [r3, #0]
 80070e2:	6862      	ldr	r2, [r4, #4]
 80070e4:	2100      	movs	r1, #0
 80070e6:	4628      	mov	r0, r5
 80070e8:	f7f9 f87a 	bl	80001e0 <memchr>
 80070ec:	b108      	cbz	r0, 80070f2 <_printf_i+0x1ea>
 80070ee:	1b40      	subs	r0, r0, r5
 80070f0:	6060      	str	r0, [r4, #4]
 80070f2:	6863      	ldr	r3, [r4, #4]
 80070f4:	6123      	str	r3, [r4, #16]
 80070f6:	2300      	movs	r3, #0
 80070f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070fc:	e7aa      	b.n	8007054 <_printf_i+0x14c>
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	462a      	mov	r2, r5
 8007102:	4649      	mov	r1, r9
 8007104:	4640      	mov	r0, r8
 8007106:	47d0      	blx	sl
 8007108:	3001      	adds	r0, #1
 800710a:	d0ad      	beq.n	8007068 <_printf_i+0x160>
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	079b      	lsls	r3, r3, #30
 8007110:	d413      	bmi.n	800713a <_printf_i+0x232>
 8007112:	68e0      	ldr	r0, [r4, #12]
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	4298      	cmp	r0, r3
 8007118:	bfb8      	it	lt
 800711a:	4618      	movlt	r0, r3
 800711c:	e7a6      	b.n	800706c <_printf_i+0x164>
 800711e:	2301      	movs	r3, #1
 8007120:	4632      	mov	r2, r6
 8007122:	4649      	mov	r1, r9
 8007124:	4640      	mov	r0, r8
 8007126:	47d0      	blx	sl
 8007128:	3001      	adds	r0, #1
 800712a:	d09d      	beq.n	8007068 <_printf_i+0x160>
 800712c:	3501      	adds	r5, #1
 800712e:	68e3      	ldr	r3, [r4, #12]
 8007130:	9903      	ldr	r1, [sp, #12]
 8007132:	1a5b      	subs	r3, r3, r1
 8007134:	42ab      	cmp	r3, r5
 8007136:	dcf2      	bgt.n	800711e <_printf_i+0x216>
 8007138:	e7eb      	b.n	8007112 <_printf_i+0x20a>
 800713a:	2500      	movs	r5, #0
 800713c:	f104 0619 	add.w	r6, r4, #25
 8007140:	e7f5      	b.n	800712e <_printf_i+0x226>
 8007142:	bf00      	nop
 8007144:	08007459 	.word	0x08007459
 8007148:	0800746a 	.word	0x0800746a

0800714c <memmove>:
 800714c:	4288      	cmp	r0, r1
 800714e:	b510      	push	{r4, lr}
 8007150:	eb01 0402 	add.w	r4, r1, r2
 8007154:	d902      	bls.n	800715c <memmove+0x10>
 8007156:	4284      	cmp	r4, r0
 8007158:	4623      	mov	r3, r4
 800715a:	d807      	bhi.n	800716c <memmove+0x20>
 800715c:	1e43      	subs	r3, r0, #1
 800715e:	42a1      	cmp	r1, r4
 8007160:	d008      	beq.n	8007174 <memmove+0x28>
 8007162:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800716a:	e7f8      	b.n	800715e <memmove+0x12>
 800716c:	4402      	add	r2, r0
 800716e:	4601      	mov	r1, r0
 8007170:	428a      	cmp	r2, r1
 8007172:	d100      	bne.n	8007176 <memmove+0x2a>
 8007174:	bd10      	pop	{r4, pc}
 8007176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800717a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800717e:	e7f7      	b.n	8007170 <memmove+0x24>

08007180 <_sbrk_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4d06      	ldr	r5, [pc, #24]	; (800719c <_sbrk_r+0x1c>)
 8007184:	2300      	movs	r3, #0
 8007186:	4604      	mov	r4, r0
 8007188:	4608      	mov	r0, r1
 800718a:	602b      	str	r3, [r5, #0]
 800718c:	f7f9 fd82 	bl	8000c94 <_sbrk>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_sbrk_r+0x1a>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_sbrk_r+0x1a>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	20001630 	.word	0x20001630

080071a0 <_realloc_r>:
 80071a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a4:	4680      	mov	r8, r0
 80071a6:	4614      	mov	r4, r2
 80071a8:	460e      	mov	r6, r1
 80071aa:	b921      	cbnz	r1, 80071b6 <_realloc_r+0x16>
 80071ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071b0:	4611      	mov	r1, r2
 80071b2:	f7ff bc57 	b.w	8006a64 <_malloc_r>
 80071b6:	b92a      	cbnz	r2, 80071c4 <_realloc_r+0x24>
 80071b8:	f7ff fbe8 	bl	800698c <_free_r>
 80071bc:	4625      	mov	r5, r4
 80071be:	4628      	mov	r0, r5
 80071c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071c4:	f000 f81b 	bl	80071fe <_malloc_usable_size_r>
 80071c8:	4284      	cmp	r4, r0
 80071ca:	4607      	mov	r7, r0
 80071cc:	d802      	bhi.n	80071d4 <_realloc_r+0x34>
 80071ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071d2:	d812      	bhi.n	80071fa <_realloc_r+0x5a>
 80071d4:	4621      	mov	r1, r4
 80071d6:	4640      	mov	r0, r8
 80071d8:	f7ff fc44 	bl	8006a64 <_malloc_r>
 80071dc:	4605      	mov	r5, r0
 80071de:	2800      	cmp	r0, #0
 80071e0:	d0ed      	beq.n	80071be <_realloc_r+0x1e>
 80071e2:	42bc      	cmp	r4, r7
 80071e4:	4622      	mov	r2, r4
 80071e6:	4631      	mov	r1, r6
 80071e8:	bf28      	it	cs
 80071ea:	463a      	movcs	r2, r7
 80071ec:	f7ff fbc0 	bl	8006970 <memcpy>
 80071f0:	4631      	mov	r1, r6
 80071f2:	4640      	mov	r0, r8
 80071f4:	f7ff fbca 	bl	800698c <_free_r>
 80071f8:	e7e1      	b.n	80071be <_realloc_r+0x1e>
 80071fa:	4635      	mov	r5, r6
 80071fc:	e7df      	b.n	80071be <_realloc_r+0x1e>

080071fe <_malloc_usable_size_r>:
 80071fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007202:	1f18      	subs	r0, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	bfbc      	itt	lt
 8007208:	580b      	ldrlt	r3, [r1, r0]
 800720a:	18c0      	addlt	r0, r0, r3
 800720c:	4770      	bx	lr
	...

08007210 <_init>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	bf00      	nop
 8007214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007216:	bc08      	pop	{r3}
 8007218:	469e      	mov	lr, r3
 800721a:	4770      	bx	lr

0800721c <_fini>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	bf00      	nop
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr
